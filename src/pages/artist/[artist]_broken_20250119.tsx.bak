import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Layout from '@/components/Layout';
import AlbumImage from '@/components/AlbumImage';
import SmartSearchBox from '@/components/SmartSearchBox';
import { motion } from 'framer-motion';
import { FaMusic, FaTrophy, FaChartLine, FaNewspaper, FaShoppingCart } from 'react-icons/fa';
import toast from 'react-hot-toast';

interface ArtistData {
  artist: string;
  total_tracks: number;
  charts: {
    [chartName: string]: Array<{
      track: string;
      rank: number | null;
      views: string;
      album_image: string;
    }>;
  };
}

export default function ArtistDetailPage() {
  const router = useRouter();
  const { artist } = router.query;
  const [artistData, setArtistData] = useState<ArtistData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('charts');
  const [news, setNews] = useState<any[]>([]);
  const [goods, setGoods] = useState<any[]>([]);

  // 🎯 아티스트 데이터 가져오기 (단순화)
  const fetchArtistData = async () => {
    if (!artist) return;

    setIsLoading(true);
    try {
      // 🔥 백엔드가 한글/영어 모두 처리 - 그냥 보내기만!
      const response = await fetch(`/api/artist/${encodeURIComponent(artist as string)}/complete`);
      
      if (!response.ok) {
        throw new Error('아티스트 정보를 불러올 수 없습니다');
      }

      const data = await response.json();
      setArtistData(data);
    } catch (error) {
      console.error('아티스트 정보 로드 오류:', error);
      toast.error('아티스트 정보를 불러올 수 없습니다');
    } finally {
      setIsLoading(false);
    }
  };

  // 뉴스 가져오기
  const fetchNews = async () => {
    if (!artist) return;
    
    try {
      const response = await fetch(`/api/artist/${encodeURIComponent(artist as string)}/news`);
      const data = await response.json();
      setNews(data.news || []);
    } catch (error) {
      console.error('뉴스 로드 오류:', error);
    }
  };

  // 굿즈 가져오기
  const fetchGoods = async () => {
    if (!artist) return;
    
    try {
      const response = await fetch(`/api/artist/${encodeURIComponent(artist as string)}/goods`);
      const data = await response.json();
      setGoods(data.goods || []);
    } catch (error) {
      console.error('굿즈 로드 오류:', error);
    }
  };

  useEffect(() => {
    if (artist) {
      fetchArtistData();
    }
  }, [artist]);

  useEffect(() => {
    if (artist && activeTab === 'news') {
      fetchNews();
    } else if (artist && activeTab === 'goods') {
      fetchGoods();
    }
  }, [artist, activeTab]);

  if (isLoading) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
            <p className="mt-4 text-gray-600">아티스트 정보를 불러오는 중...</p>
          </div>
        </div>
      </Layout>
    );
  }

  if (!artistData) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <p className="text-gray-600">아티스트를 찾을 수 없습니다.</p>
            <button
              onClick={() => router.push('/')}
              className="mt-4 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
            >
              홈으로 돌아가기
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  // 백엔드가 통합한 아티스트명 사용
  const displayArtist = artistData.artist;

  return (
    <Layout>
      <Head>
        <title>{displayArtist} | K-POP Ranker</title>
        <meta name="description" content={`${displayArtist}의 차트 순위 및 정보`} />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* 헤더 */}
        <div className="bg-white shadow-sm sticky top-0 z-40">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">{displayArtist}</h1>
                <p className="text-sm text-gray-600 mt-1">
                  총 {artistData.total_tracks}개 트랙 • {Object.keys(artistData.charts).length}개 차트
                </p>
              </div>
              <SmartSearchBox />
            </div>

            {/* 탭 메뉴 */}
            <div className="flex space-x-4 mt-4 border-b">
              <button
                onClick={() => setActiveTab('charts')}
                className={`pb-2 px-1 border-b-2 transition-colors ${
                  activeTab === 'charts'
                    ? 'border-purple-600 text-purple-600'
                    : 'border-transparent text-gray-600 hover:text-gray-900'
                }`}
              >
                <FaChartLine className="inline mr-2" />
                차트 순위
              </button>
              <button
                onClick={() => setActiveTab('news')}
                className={`pb-2 px-1 border-b-2 transition-colors ${
                  activeTab === 'news'
                    ? 'border-purple-600 text-purple-600'
                    : 'border-transparent text-gray-600 hover:text-gray-900'
                }`}
              >
                <FaNewspaper className="inline mr-2" />
                뉴스
              </button>
              <button
                onClick={() => setActiveTab('goods')}
                className={`pb-2 px-1 border-b-2 transition-colors ${
                  activeTab === 'goods'
                    ? 'border-purple-600 text-purple-600'
                    : 'border-transparent text-gray-600 hover:text-gray-900'
                }`}
              >
                <FaShoppingCart className="inline mr-2" />
                굿즈
              </button>
            </div>
          </div>
        </div>

        {/* 컨텐츠 */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {activeTab === 'charts' && (
            <div className="space-y-6">
              {Object.entries(artistData.charts).map(([chartName, tracks]) => (
                <motion.div
                  key={chartName}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="bg-white rounded-lg shadow-sm overflow-hidden"
                >
                  <div className="bg-gradient-to-r from-purple-600 to-pink-600 px-6 py-3">
                    <h3 className="text-white font-semibold text-lg">{chartName}</h3>
                  </div>
                  
                  <div className="p-6">
                    <div className="space-y-4">
                      {tracks.map((track, index) => (
                        <div
                          key={index}
                          className="flex items-center gap-4 p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer"
                          onClick={() => router.push(`/track/${encodeURIComponent(displayArtist)}/${encodeURIComponent(track.track)}`)}
                        >
                          <div className="flex-shrink-0">
                            <AlbumImage
                              src={track.album_image}
                              alt={`${displayArtist} - ${track.track}`}
                              size="sm"
                              artist={displayArtist}
                              track={track.track}
                            />
                          </div>
                          
                          <div className="flex-grow">
                            <div className="font-medium text-gray-900">{track.track}</div>
                            {track.views && (
                              <div className="text-xs text-gray-500 mt-1">{track.views}</div>
                            )}
                          </div>
                          
                          {track.rank && (
                            <div className="flex-shrink-0">
                              <div className="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm font-semibold">
                                #{track.rank}
                              </div>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          )}

          {activeTab === 'news' && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {news.length > 0 ? (
                news.map((item, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-lg transition-shadow"
                  >
                    <a href={item.url} target="_blank" rel="noopener noreferrer">
                      <div className="aspect-w-16 aspect-h-9">
                        <img
                          src={item.image || `/api/album-image-v2/${encodeURIComponent(displayArtist)}`}
                          alt={item.title}
                          className="w-full h-48 object-cover"
                        />
                      </div>
                      <div className="p-4">
                        <h3 className="font-semibold text-gray-900 line-clamp-2">{item.title}</h3>
                        <p className="text-sm text-gray-600 mt-2 line-clamp-2">{item.description}</p>
                        <div className="flex justify-between items-center mt-3">
                          <span className="text-xs text-gray-500">{item.date}</span>
                          <span className="text-xs text-purple-600">{item.source}</span>
                        </div>
                      </div>
                    </a>
                  </motion.div>
                ))
              ) : (
                <div className="col-span-2 text-center py-12">
                  <p className="text-gray-600">뉴스를 불러오는 중...</p>
                </div>
              )}
            </div>
          )}

          {activeTab === 'goods' && (
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
              {goods.length > 0 ? (
                goods.map((item, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-lg transition-shadow"
                  >
                    <a href={item.url} target="_blank" rel="noopener noreferrer">
                      <div className="aspect-w-1 aspect-h-1">
                        <img
                          src={item.image || `/api/album-image-v2/${encodeURIComponent(displayArtist)}`}
                          alt={item.name}
                          className="w-full h-48 object-cover"
                        />
                      </div>
                      <div className="p-4">
                        <h3 className="font-medium text-gray-900 text-sm line-clamp-2">{item.name}</h3>
                        <p className="text-lg font-bold text-purple-600 mt-2">{item.price}</p>
                        <div className="flex items-center mt-2">
                          <div className="flex text-yellow-400 text-xs">
                            {'★'.repeat(Math.floor(item.rating || 0))}
                          </div>
                          <span className="text-xs text-gray-500 ml-1">({item.review_count || 0})</span>
                        </div>
                        <p className="text-xs text-gray-500 mt-1">{item.shop}</p>
                      </div>
                    </a>
                  </motion.div>
                ))
              ) : (
                <div className="col-span-full text-center py-12">
                  <p className="text-gray-600">굿즈를 불러오는 중...</p>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </Layout>
  );
}
