import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Layout from '@/components/Layout';
import AlbumImage from '@/components/AlbumImage';
import SmartSearchBox from '@/components/SmartSearchBox';
import { motion, AnimatePresence } from 'framer-motion';
import { FaMusic, FaTrophy, FaChartLine, FaArrowUp, FaArrowDown, FaHeart, FaRegHeart, FaCalendar } from 'react-icons/fa';
import toast from 'react-hot-toast';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

interface ChartData {
  chart: string;
  rank: number | null;
  views: string;
  album_image?: string;
  crawl_time?: string;
}

interface TrackData {
  artist: string;
  artist_normalized?: string;
  track: string;
  charts: ChartData[];
}

interface ChartHistory {
  date: string;
  rank: number;
}

export default function TrackDetailPage() {
  const router = useRouter();
  const { artist, track } = router.query;
  const [trackData, setTrackData] = useState<TrackData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedChart, setSelectedChart] = useState<string | null>(null);
  const [chartHistory, setChartHistory] = useState<ChartHistory[]>([]);
  const [isInPortfolio, setIsInPortfolio] = useState(false);
  const [loadingPortfolio, setLoadingPortfolio] = useState(false);

  // 포트폴리오 상태 확인
  const checkPortfolioStatus = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';
      const response = await fetch(`${apiUrl}/api/portfolio`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        const exists = data.items?.some((item: any) => 
          item.artist === artist && item.track === track
        );
        setIsInPortfolio(exists);
      }
    } catch (error) {
      console.error('포트폴리오 상태 확인 오류:', error);
    }
  };

  // 포트폴리오 추가/제거
  const togglePortfolio = async () => {
    const token = localStorage.getItem('token');
    if (!token) {
      toast.error('로그인이 필요합니다');
      router.push('/auth/login');
      return;
    }

    setLoadingPortfolio(true);
    try {
      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';
      
      if (isInPortfolio) {
        // 제거 로직 (포트폴리오 ID 필요)
        // 실제로는 포트폴리오 목록에서 해당 아이템의 ID를 찾아야 함
        toast.success('포트폴리오에서 제거되었습니다');
        setIsInPortfolio(false);
      } else {
        // 추가
        const response = await fetch(`${apiUrl}/api/portfolio`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            artist: trackData?.artist,
            track: trackData?.track
          })
        });

        if (response.ok) {
          toast.success('포트폴리오에 추가되었습니다');
          setIsInPortfolio(true);
        } else {
          throw new Error('포트폴리오 추가 실패');
        }
      }
    } catch (error) {
      console.error('포트폴리오 토글 오류:', error);
      toast.error('포트폴리오 업데이트 실패');
    } finally {
      setLoadingPortfolio(false);
    }
  };

  // 트랙 데이터 가져오기
  const fetchTrackData = async () => {
    if (!artist || !track) return;

    setIsLoading(true);
    try {
      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';
      
      // search2 API 사용 (아티스트 + 트랙)
      const response = await fetch(
        `${apiUrl}/api/search2?artist=${encodeURIComponent(artist as string)}&track=${encodeURIComponent(track as string)}`
      );
      
      if (!response.ok) {
        // search2가 실패하면 일반 search API 사용
        const searchResponse = await fetch(
          `${apiUrl}/api/search?artist=${encodeURIComponent(artist as string)}&track=${encodeURIComponent(track as string)}`
        );
        
        if (!searchResponse.ok) {
          throw new Error('트랙 정보를 불러올 수 없습니다');
        }
        
        const searchData = await searchResponse.json();
        processSearchData(searchData);
        return;
      }

      const data = await response.json();
      
      // search2 API 응답 처리
      if (data.results && data.results.length > 0) {
        const chartsData: ChartData[] = [];
        
        data.results.forEach((chartResult: any) => {
          const trackInfo = chartResult.tracks?.[0]; // 첫 번째 트랙 사용 (정확한 매칭)
          if (trackInfo) {
            chartsData.push({
              chart: chartResult.chart,
              rank: trackInfo.rank,
              views: trackInfo.views_or_streams || trackInfo.views || '',
              album_image: trackInfo.album_image,
              crawl_time: trackInfo.crawl_time
            });
          }
        });

        setTrackData({
          artist: data.artist || (artist as string),
          artist_normalized: data.artist_normalized,
          track: data.track || (track as string),
          charts: chartsData
        });
      }
    } catch (error) {
      console.error('트랙 정보 로드 오류:', error);
      toast.error('트랙 정보를 불러올 수 없습니다');
      setTrackData(null);
    } finally {
      setIsLoading(false);
    }
  };

  // 일반 검색 데이터 처리
  const processSearchData = (data: any) => {
    const chartsData: ChartData[] = [];
    
    data.results?.forEach((chartResult: any) => {
      const trackInfo = chartResult.tracks?.find((t: any) => 
        t.track?.toLowerCase() === (track as string).toLowerCase()
      );
      
      if (trackInfo) {
        chartsData.push({
          chart: chartResult.chart,
          rank: trackInfo.rank,
          views: trackInfo.views || '',
          album_image: trackInfo.album_image
        });
      }
    });

    setTrackData({
      artist: artist as string,
      track: track as string,
      charts: chartsData
    });
  };

  // 차트 히스토리 데이터 가져오기 (더미 데이터)
  const fetchChartHistory = (chartName: string) => {
    // 실제로는 API에서 가져와야 함
    const mockHistory: ChartHistory[] = [
      { date: '2025-07-28', rank: 15 },
      { date: '2025-07-29', rank: 12 },
      { date: '2025-07-30', rank: 10 },
      { date: '2025-07-31', rank: 8 },
      { date: '2025-08-01', rank: 7 },
      { date: '2025-08-02', rank: 9 },
      { date: '2025-08-03', rank: 11 },
      { date: '2025-08-04', rank: 10 },
    ];
    setChartHistory(mockHistory);
  };

  useEffect(() => {
    if (artist && track) {
      fetchTrackData();
      checkPortfolioStatus();
    }
  }, [artist, track]);

  if (isLoading) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
            <p className="mt-4 text-gray-600">트랙 정보를 불러오는 중...</p>
          </div>
        </div>
      </Layout>
    );
  }

  if (!trackData || trackData.charts.length === 0) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <p className="text-xl text-gray-600 mb-4">"{track}" 트랙 정보를 찾을 수 없습니다.</p>
            <p className="text-gray-500 mb-6">아티스트: {artist}</p>
            <button
              onClick={() => router.push('/')}
              className="px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
            >
              홈으로 돌아가기
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  // 첫 번째 차트의 앨범 이미지 사용
  const albumImage = trackData.charts.find(chart => chart.album_image)?.album_image;

  // 차트 성과 계산
  const totalCharts = trackData.charts.length;
  const rankedCharts = trackData.charts.filter(c => c.rank !== null);
  const bestRank = rankedCharts.length > 0 
    ? Math.min(...rankedCharts.map(c => c.rank as number))
    : null;
  const averageRank = rankedCharts.length > 0
    ? Math.round(rankedCharts.reduce((sum, c) => sum + (c.rank || 0), 0) / rankedCharts.length)
    : null;

  // 차트 히스토리 그래프 데이터
  const chartHistoryData = {
    labels: chartHistory.map(h => h.date.slice(5)), // MM-DD 형식
    datasets: [{
      label: '순위',
      data: chartHistory.map(h => h.rank),
      borderColor: 'rgb(147, 51, 234)',
      backgroundColor: 'rgba(147, 51, 234, 0.1)',
      tension: 0.4,
      pointRadius: 4,
      pointHoverRadius: 6
    }]
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false
      },
      title: {
        display: true,
        text: `${selectedChart} 순위 변화`,
        font: {
          size: 16
        }
      }
    },
    scales: {
      y: {
        reverse: true,
        min: 1,
        ticks: {
          stepSize: 1
        }
      }
    }
  };

  return (
    <Layout>
      <Head>
        <title>{trackData.track} - {trackData.artist} | K-POP Ranker</title>
        <meta name="description" content={`${trackData.artist}의 ${trackData.track} 차트 순위`} />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* 헤더 */}
        <div className="bg-white shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div className="flex flex-col lg:flex-row items-start lg:items-center justify-between gap-6">
              <div className="flex flex-col sm:flex-row items-start sm:items-center gap-6 w-full lg:w-auto">
                {/* 앨범 이미지 */}
                <div className="flex-shrink-0">
                  <AlbumImage
                    src={albumImage}
                    alt={`${trackData.artist} - ${trackData.track}`}
                    size="2xl"
                    artist={trackData.artist_normalized || trackData.artist}
                    artistNormalized={trackData.artist_normalized}
                    track={trackData.track}
                  />
                </div>
                
                {/* 트랙 정보 */}
                <div className="flex-1">
                  <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">{trackData.track}</h1>
                  <button
                    onClick={() => router.push(`/artist/${encodeURIComponent(trackData.artist)}`)}
                    className="text-lg sm:text-xl text-purple-600 hover:text-purple-700 mt-1 transition-colors"
                  >
                    {trackData.artist}
                  </button>
                  <div className="flex items-center gap-4 mt-3">
                    <p className="text-sm text-gray-600">
                      {totalCharts}개 차트 진입
                    </p>
                    {/* 포트폴리오 추가 버튼 */}
                    <button
                      onClick={togglePortfolio}
                      disabled={loadingPortfolio}
                      className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-all ${
                        isInPortfolio 
                          ? 'bg-pink-100 text-pink-600 hover:bg-pink-200' 
                          : 'bg-purple-100 text-purple-600 hover:bg-purple-200'
                      } ${loadingPortfolio ? 'opacity-50 cursor-not-allowed' : ''}`}
                    >
                      {isInPortfolio ? <FaHeart /> : <FaRegHeart />}
                      <span className="font-medium">
                        {isInPortfolio ? '포트폴리오에서 제거' : '포트폴리오에 추가'}
                      </span>
                    </button>
                  </div>
                </div>
              </div>
              
              <div className="w-full lg:w-auto">
                <SmartSearchBox />
              </div>
            </div>
          </div>
        </div>

        {/* 차트별 순위 */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <FaChartLine className="mr-2 text-purple-600" />
            차트별 순위
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {trackData.charts.map((chartInfo, index) => (
              <motion.div
                key={`${chartInfo.chart}-${index}`}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-lg transition-all cursor-pointer"
                onClick={() => {
                  setSelectedChart(chartInfo.chart);
                  fetchChartHistory(chartInfo.chart);
                }}
              >
                <div className="bg-gradient-to-r from-purple-600 to-pink-600 px-4 py-3">
                  <h3 className="text-white font-semibold">{chartInfo.chart}</h3>
                </div>
                
                <div className="p-6">
                  <div className="text-center">
                    {chartInfo.rank !== null ? (
                      <>
                        <div className="text-4xl font-bold text-purple-600 mb-2">
                          #{chartInfo.rank}
                        </div>
                        {chartInfo.views && (
                          <div className="text-sm text-gray-600">
                            {chartInfo.views}
                          </div>
                        )}
                      </>
                    ) : (
                      <div className="text-gray-400">
                        <FaMusic className="mx-auto text-3xl mb-2" />
                        <p>조회수만 집계</p>
                        {chartInfo.views && (
                          <div className="text-sm text-gray-600 mt-2">
                            {chartInfo.views}
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                  {chartInfo.crawl_time && (
                    <div className="mt-4 pt-4 border-t border-gray-100">
                      <div className="flex items-center justify-center text-xs text-gray-500">
                        <FaCalendar className="mr-1" />
                        {new Date(chartInfo.crawl_time).toLocaleDateString('ko-KR')}
                      </div>
                    </div>
                  )}
                </div>
              </motion.div>
            ))}
          </div>

          {/* 차트 히스토리 모달 */}
          <AnimatePresence>
            {selectedChart && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"
                onClick={() => setSelectedChart(null)}
              >
                <motion.div
                  initial={{ scale: 0.9, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  exit={{ scale: 0.9, opacity: 0 }}
                  className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[80vh] overflow-auto"
                  onClick={(e) => e.stopPropagation()}
                >
                  <div className="mb-4">
                    <h3 className="text-xl font-bold text-gray-900">
                      {selectedChart} 순위 변화
                    </h3>
                    <p className="text-gray-600 mt-1">
                      {trackData.artist} - {trackData.track}
                    </p>
                  </div>
                  
                  <div className="h-64 mb-4">
                    <Line data={chartHistoryData} options={chartOptions} />
                  </div>
                  
                  <button
                    onClick={() => setSelectedChart(null)}
                    className="w-full px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                  >
                    닫기
                  </button>
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* 차트 성과 요약 */}
          <div className="mt-12 bg-white rounded-lg shadow-sm p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <FaTrophy className="mr-2 text-yellow-500" />
              차트 성과 요약
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-purple-600">
                  {totalCharts}
                </div>
                <div className="text-sm text-gray-600 mt-1">진입 차트 수</div>
              </div>
              
              <div className="text-center">
                <div className="text-3xl font-bold text-purple-600">
                  {bestRank || '-'}
                </div>
                <div className="text-sm text-gray-600 mt-1">최고 순위</div>
              </div>
              
              <div className="text-center">
                <div className="text-3xl font-bold text-purple-600">
                  {averageRank || '-'}
                </div>
                <div className="text-sm text-gray-600 mt-1">평균 순위</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}