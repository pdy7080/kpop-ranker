import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Layout from '@/components/Layout';
import ImageWithFallback from '@/components/ImageWithFallback';
import { motion, AnimatePresence } from 'framer-motion';
import { ChartLogos, getChartLogo } from '@/utils/chartLogos';
import { useAuth } from '@/contexts/AuthContext';
import { portfolioAPI } from '@/lib/api';
import toast from 'react-hot-toast';
import { 
  TrendingUp, TrendingDown, Award, Clock, Music, 
  Calendar, Activity, BarChart3, Globe, Play,
  Youtube, Hash, Star, ArrowUp, ArrowDown, Disc,
  ExternalLink, Share2, Heart, Spotify, Apple, Plus
} from 'lucide-react';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';

interface ChartData {
  chart: string;
  rank: number;
  change?: number;
  last_updated?: string;
  views?: string;
}

interface TrackData {
  artist: string;
  track: string;
  album?: string;
  release_date?: string;
  genre?: string;
  image_url?: string;
  charts: ChartData[];
  trend_score?: number;
  stats?: {
    peak_rank: number;
    chart_count: number;
    days_on_chart: number;
  };
  history?: any[];
  streaming_links?: {
    spotify?: string;
    youtube?: string;
    apple_music?: string;
  };
}

export default function TrackDetailPage() {
  const router = useRouter();
  const { artist, title } = router.query;
  const { isAuthenticated } = useAuth();
  const [trackData, setTrackData] = useState<TrackData | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'overview' | 'charts' | 'history'>('overview');
  const [selectedChart, setSelectedChart] = useState<string>('all');
  const [isLiked, setIsLiked] = useState(false);
  const [isAddingToPortfolio, setIsAddingToPortfolio] = useState(false);

  const addToPortfolio = async () => {
    if (!isAuthenticated) {
      toast.error('로그인이 필요합니다');
      router.push('/login');
      return;
    }

    if (!trackData) return;

    setIsAddingToPortfolio(true);
    try {
      const response = await portfolioAPI.add(trackData.artist, trackData.track);
      
      if (response.success) {
        toast.success('포트폴리오에 추가되었습니다!');
      } else {
        toast.error(response.error || '추가에 실패했습니다');
      }
    } catch (error) {
      console.error('Portfolio add error:', error);
      toast.error('포트폴리오 추가 중 오류가 발생했습니다');
    } finally {
      setIsAddingToPortfolio(false);
    }
  };

  useEffect(() => {
    if (artist && title && typeof artist === 'string' && typeof title === 'string') {
      fetchTrackData(artist, title);
    }
  }, [artist, title]);

  const fetchTrackData = async (artistName: string, trackTitle: string) => {
    try {
      setLoading(true);
      
      // 백엔드 없이도 테스트할 수 있도록 임시 데이터 추가
      const tempData: TrackData = {
        artist: artistName,
        track: trackTitle,
        album: 'K-POP Album',
        release_date: '2024',
        genre: 'K-POP',
        image_url: '',
        charts: [
          { chart: 'melon', rank: 3, views: '1,234,567' },
          { chart: 'genie', rank: 2, views: '987,654' },
          { chart: 'bugs', rank: 3, views: '543,210' }
        ],
        trend_score: 85,
        stats: {
          peak_rank: 2,
          chart_count: 3,
          days_on_chart: 7
        },
        history: [],
        streaming_links: {}
      };
      
      console.log('테스트 데이터 로드 완료:', tempData);
      setTrackData(tempData);
      return;
      
      // 원래 API 호출 코드 (주석 처리)
      /*
      const response = await fetch(
        `${API_URL}/api/track/${encodeURIComponent(artistName)}/${encodeURIComponent(trackTitle)}`
      );
      
      if (!response.ok) throw new Error(`API Error: ${response.status}`);
      
      const data = await response.json();
      console.log('Track data:', data);
      
      // 이미지 URL 처리
      let imageUrl = data.image_url;
      if (!imageUrl || imageUrl === '') {
        imageUrl = `${API_URL}/api/album-image-smart/${encodeURIComponent(artistName)}/${encodeURIComponent(trackTitle)}`;
      } else if (!imageUrl.startsWith('http')) {
        imageUrl = imageUrl.startsWith('/') ? `${API_URL}${imageUrl}` : `${API_URL}/${imageUrl}`;
      }
      
      const processedData: TrackData = {
        artist: data.artist || artistName,
        track: data.track || trackTitle,
        album: data.album || 'K-POP Album',
        release_date: data.release_date || '2024',
        genre: data.genre || 'K-POP',
        image_url: imageUrl,
        charts: data.charts || [],
        trend_score: data.trend_score || 0,
        stats: data.stats || {
          peak_rank: 0,
          chart_count: 0,
          days_on_chart: 0
        },
        history: data.history || [],
        streaming_links: data.streaming_links || {}
      };
      
      setTrackData(processedData);
      */
    } catch (err) {
      console.error('Failed to fetch track:', err);
      setTrackData(null);
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString?: string) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('ko-KR', { month: 'short', day: 'numeric' });
  };

  const getChangeIndicator = (change?: number) => {
    if (change === undefined || change === 0) return <span className="text-gray-500">-</span>;
    if (change > 0) return (
      <span className="flex items-center gap-1 text-green-500">
        <ArrowUp className="w-3 h-3" />
        {change}
      </span>
    );
    return (
      <span className="flex items-center gap-1 text-red-500">
        <ArrowDown className="w-3 h-3" />
        {Math.abs(change)}
      </span>
    );
  };

  // 실제 통계 계산
  const stats = {
    chartCount: trackData?.charts?.length || 0,
    bestRank: trackData?.stats?.peak_rank || 
      (trackData?.charts && trackData.charts.length > 0 
        ? Math.min(...trackData.charts.map(c => c.rank)) 
        : null),
    avgRank: trackData?.charts && trackData.charts.length > 0 
      ? Math.round(trackData.charts.reduce((acc, c) => acc + c.rank, 0) / trackData.charts.length)
      : 0,
    totalDays: trackData?.stats?.days_on_chart || 0
  };

  if (loading) {
    return (
      <Layout>
        <div className="min-h-screen bg-[#0A0A0F] flex items-center justify-center">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
          >
            <Disc className="w-16 h-16 text-purple-500" />
          </motion.div>
        </div>
      </Layout>
    );
  }

  if (!trackData) {
    return (
      <Layout>
        <div className="min-h-screen bg-[#0A0A0F] flex items-center justify-center">
          <div className="text-center">
            <Music className="w-24 h-24 text-gray-600 mx-auto mb-4" />
            <h1 className="text-2xl text-white mb-4">트랙을 찾을 수 없습니다</h1>
            <button 
              onClick={() => router.push('/')}
              className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
            >
              홈으로 돌아가기
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <Head>
        <title>{trackData.track} - {trackData.artist} | KPOP Ranker</title>
      </Head>

      <div className="min-h-screen bg-[#0A0A0F] text-white">
        <div className="container mx-auto px-4 py-8">
          {/* Track Header */}
          <motion.div 
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-8"
          >
            {/* Hero Section */}
            <div className="relative rounded-2xl overflow-hidden bg-gradient-to-br from-purple-900/50 to-pink-900/50 p-8 mb-8">
              <div className="absolute inset-0 bg-gradient-to-br from-purple-600/20 to-pink-600/20" />
              
              <div className="relative flex flex-col md:flex-row gap-6">
                <motion.div
                  initial={{ scale: 0.8, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ type: "spring", stiffness: 200 }}
                >
                  <ImageWithFallback
                    src={trackData.image_url || ''}
                    alt={`${trackData.artist} - ${trackData.track}`}
                    width={200}
                    height={200}
                    className="rounded-xl shadow-2xl"
                  />
                </motion.div>
                
                <div className="flex-grow">
                  <h1 className="text-3xl md:text-4xl font-bold mb-2">{trackData.track}</h1>
                  <p 
                    className="text-xl text-gray-300 mb-4 cursor-pointer hover:text-purple-400 transition-colors inline-flex items-center gap-2"
                    onClick={() => router.push(`/artist/${encodeURIComponent(trackData.artist)}`)}
                  >
                    {trackData.artist}
                    <ExternalLink className="w-4 h-4" />
                  </p>
                  
                  {/* Quick Stats - 실제 데이터 기반 */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="bg-black/30 backdrop-blur rounded-lg p-3">
                      <div className="flex items-center gap-2 mb-1">
                        <Award className="w-4 h-4 text-yellow-500" />
                        <span className="text-xs text-gray-400">최고 순위</span>
                      </div>
                      <p className="text-2xl font-bold">
                        {stats.bestRank ? `#${stats.bestRank}` : '-'}
                      </p>
                    </div>
                    
                    <div className="bg-black/30 backdrop-blur rounded-lg p-3">
                      <div className="flex items-center gap-2 mb-1">
                        <BarChart3 className="w-4 h-4 text-blue-500" />
                        <span className="text-xs text-gray-400">차트 진입</span>
                      </div>
                      <p className="text-2xl font-bold">{stats.chartCount}개</p>
                    </div>
                    
                    <div className="bg-black/30 backdrop-blur rounded-lg p-3">
                      <div className="flex items-center gap-2 mb-1">
                        <Clock className="w-4 h-4 text-green-500" />
                        <span className="text-xs text-gray-400">차트 체류</span>
                      </div>
                      <p className="text-2xl font-bold">{stats.totalDays}일</p>
                    </div>
                    
                    <div className="bg-black/30 backdrop-blur rounded-lg p-3">
                      <div className="flex items-center gap-2 mb-1">
                        <TrendingUp className="w-4 h-4 text-purple-500" />
                        <span className="text-xs text-gray-400">트렌드</span>
                      </div>
                      <p className="text-2xl font-bold">{trackData.trend_score || 0}</p>
                    </div>
                  </div>

                  {/* Streaming Links */}
                  {trackData.streaming_links && (
                    <div className="flex gap-2 mt-4">
                      {trackData.streaming_links.spotify && (
                        <a 
                          href={trackData.streaming_links.spotify}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="p-2 bg-green-600/20 rounded-lg hover:bg-green-600/30 transition-all"
                        >
                          <Spotify className="w-5 h-5 text-green-500" />
                        </a>
                      )}
                      {trackData.streaming_links.youtube && (
                        <a 
                          href={trackData.streaming_links.youtube}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="p-2 bg-red-600/20 rounded-lg hover:bg-red-600/30 transition-all"
                        >
                          <Youtube className="w-5 h-5 text-red-500" />
                        </a>
                      )}
                      {trackData.streaming_links.apple_music && (
                        <a 
                          href={trackData.streaming_links.apple_music}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="p-2 bg-gray-600/20 rounded-lg hover:bg-gray-600/30 transition-all"
                        >
                          <Apple className="w-5 h-5 text-gray-400" />
                        </a>
                      )}
                    </div>
                  )}

                  {/* Action Buttons */}
                  <div className="flex gap-2 mt-4">
                    <button
                      onClick={() => setIsLiked(!isLiked)}
                      className={`p-2 rounded-lg transition-all ${
                        isLiked ? 'bg-red-500 text-white' : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
                      }`}
                    >
                      <Heart className={`w-5 h-5 ${isLiked ? 'fill-current' : ''}`} />
                    </button>
                    <button className="p-2 bg-gray-800 rounded-lg hover:bg-gray-700 transition-all">
                      <Share2 className="w-5 h-5" />
                    </button>
                    {/* Portfolio Add Button */}
                    <button
                      onClick={addToPortfolio}
                      disabled={isAddingToPortfolio || !isAuthenticated}
                      className="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                    >
                      <Plus className="w-5 h-5" />
                      {isAddingToPortfolio ? '추가중...' : '포트폴리오 추가'}
                    </button>
                  </div>
                        </a>
                      )}
                      {trackData.streaming_links.youtube && (
                        <a 
                          href={trackData.streaming_links.youtube}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="p-2 bg-red-600/20 rounded-lg hover:bg-red-600/30 transition-all"
                        >
                          <Youtube className="w-5 h-5 text-red-500" />
                        </a>
                      )}
                      {trackData.streaming_links.apple_music && (
                        <a 
                          href={trackData.streaming_links.apple_music}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="p-2 bg-gray-600/20 rounded-lg hover:bg-gray-600/30 transition-all"
                        >
                          <Apple className="w-5 h-5 text-gray-400" />
                        </a>
                      )}
                    </div>
                  )}

                  {/* Action Buttons */}
                  <div className="flex gap-2 mt-4">
                    <button
                      onClick={() => setIsLiked(!isLiked)}
                      className={`p-2 rounded-lg transition-all ${
                        isLiked ? 'bg-red-500 text-white' : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
                      }`}
                    >
                      <Heart className={`w-5 h-5 ${isLiked ? 'fill-current' : ''}`} />
                    </button>
                    <button className="p-2 bg-gray-800 rounded-lg hover:bg-gray-700 transition-all">
                      <Share2 className="w-5 h-5" />
                    </button>
                    {/* Portfolio Add Button */}
                    <button
                      onClick={addToPortfolio}
                      disabled={isAddingToPortfolio || !isAuthenticated}
                      className="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                    >
                      <Plus className="w-5 h-5" />
                      {isAddingToPortfolio ? '추가중...' : '포트폴리오 추가'}
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Tabs */}
            <div className="flex gap-2 mb-6">
              {(['overview', 'charts', 'history'] as const).map(tab => (
                <button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  className={`px-6 py-2 rounded-lg transition-all ${
                    activeTab === tab 
                      ? 'bg-purple-600 text-white' 
                      : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
                  }`}
                >
                  {tab === 'overview' && 'Overview'}
                  {tab === 'charts' && `Charts (${stats.chartCount})`}
                  {tab === 'history' && 'History'}
                </button>
              ))}
            </div>
          </motion.div>

          {/* Tab Content */}
          <AnimatePresence mode="wait">
            {activeTab === 'overview' && (
              <motion.div
                key="overview"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="space-y-6"
              >
                {/* Current Chart Positions - 실제 데이터 */}
                <div className="bg-gray-800/30 rounded-xl p-6 border border-gray-700">
                  <h2 className="text-xl font-bold mb-4">현재 차트 순위</h2>
                  {trackData.charts && trackData.charts.length > 0 ? (
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      {trackData.charts.map((chart) => {
                        const logo = getChartLogo(chart.chart);
                        return (
                          <motion.div
                            key={chart.chart}
                            whileHover={{ scale: 1.05 }}
                            className="bg-gray-800/50 rounded-lg p-4 border border-gray-600 relative overflow-hidden"
                          >
                            <div className={`absolute inset-0 ${logo.bgColor} opacity-20`} />
                            <div className="relative z-10">
                              <div className="flex items-center justify-between mb-2">
                                <span className="text-2xl">{logo.icon}</span>
                                {getChangeIndicator(chart.change)}
                              </div>
                              <p className="text-3xl font-bold">#{chart.rank}</p>
                              <p className="text-xs text-gray-400 mt-1 capitalize">{chart.chart}</p>
                              {chart.last_updated && (
                                <p className="text-xs text-gray-500">{formatDate(chart.last_updated)}</p>
                              )}
                            </div>
                          </motion.div>
                        );
                      })}
                    </div>
                  ) : (
                    <p className="text-gray-400 text-center py-8">현재 차트 데이터가 없습니다</p>
                  )}
                </div>

                {/* Performance Summary */}
                <div className="bg-gradient-to-br from-purple-900/30 to-pink-900/30 rounded-xl p-6 border border-purple-700/50">
                  <h2 className="text-xl font-bold mb-4">성과 요약</h2>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-6">
                    <div>
                      <p className="text-sm text-gray-400 mb-1">앨범</p>
                      <p className="text-lg">{trackData.album}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-400 mb-1">발매일</p>
                      <p className="text-lg">{trackData.release_date}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-400 mb-1">장르</p>
                      <p className="text-lg">{trackData.genre}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-400 mb-1">평균 순위</p>
                      <p className="text-lg font-bold">#{stats.avgRank}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-400 mb-1">최고 순위</p>
                      <p className="text-lg font-bold text-yellow-500">
                        {stats.bestRank ? `#${stats.bestRank}` : '-'}
                      </p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-400 mb-1">트렌드 점수</p>
                      <p className="text-lg font-bold text-purple-400">{trackData.trend_score}</p>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}

            {activeTab === 'charts' && (
              <motion.div
                key="charts"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
              >
                <div className="space-y-4">
                  {trackData.charts && trackData.charts.length > 0 ? (
                    trackData.charts.map((chart) => {
                      const logo = getChartLogo(chart.chart);
                      return (
                        <div key={chart.chart} className="bg-gray-800/30 rounded-xl p-6 border border-gray-700">
                          <div className="flex items-center justify-between mb-4">
                            <h3 className="text-lg font-bold capitalize flex items-center gap-2">
                              <span className="text-2xl">{logo.icon}</span>
                              {chart.chart}
                            </h3>
                            <div className={`px-3 py-1 rounded-full ${logo.bgColor} ${logo.color}`}>
                              <span className="text-sm font-medium">#{chart.rank}</span>
                            </div>
                          </div>
                          
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div>
                              <p className="text-xs text-gray-400 mb-1">현재 순위</p>
                              <p className="text-2xl font-bold">#{chart.rank}</p>
                            </div>
                            <div>
                              <p className="text-xs text-gray-400 mb-1">순위 변동</p>
                              <div className="text-xl font-bold">
                                {getChangeIndicator(chart.change)}
                              </div>
                            </div>
                            <div>
                              <p className="text-xs text-gray-400 mb-1">마지막 업데이트</p>
                              <p className="text-sm">{formatDate(chart.last_updated)}</p>
                            </div>
                            {chart.views && (
                              <div>
                                <p className="text-xs text-gray-400 mb-1">조회수</p>
                                <p className="text-sm font-bold">{chart.views}</p>
                              </div>
                            )}
                          </div>
                        </div>
                      );
                    })
                  ) : (
                    <div className="bg-gray-800/30 rounded-xl p-8 text-center">
                      <BarChart3 className="w-16 h-16 text-gray-600 mx-auto mb-4" />
                      <p className="text-gray-400">차트 데이터가 없습니다</p>
                    </div>
                  )}
                </div>
              </motion.div>
            )}

            {activeTab === 'history' && (
              <motion.div
                key="history"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
              >
                <div className="bg-gray-800/30 rounded-xl p-6 border border-gray-700">
                  <h2 className="text-xl font-bold mb-4">순위 히스토리</h2>
                  
                  {trackData.history && trackData.history.length > 0 ? (
                    <>
                      {/* History Table */}
                      <div className="overflow-x-auto">
                        <table className="w-full">
                          <thead>
                            <tr className="border-b border-gray-700">
                              <th className="text-left py-2 px-3">날짜</th>
                              {['melon', 'genie', 'bugs', 'spotify'].map(chart => (
                                <th key={chart} className="text-center py-2 px-2 capitalize">{chart}</th>
                              ))}
                            </tr>
                          </thead>
                          <tbody>
                            {trackData.history.map((day, idx) => (
                              <tr key={idx} className="border-b border-gray-800">
                                <td className="py-2 px-3 text-sm">{formatDate(day.date)}</td>
                                {['melon', 'genie', 'bugs', 'spotify'].map(chart => (
                                  <td key={chart} className="text-center py-2 px-2">
                                    {day[chart] ? (
                                      <span className="text-purple-400 font-bold">#{day[chart]}</span>
                                    ) : (
                                      <span className="text-gray-600">-</span>
                                    )}
                                  </td>
                                ))}
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </>
                  ) : (
                    <div className="text-center py-8">
                      <Calendar className="w-16 h-16 text-gray-600 mx-auto mb-4" />
                      <p className="text-gray-400">히스토리 데이터가 없습니다</p>
                    </div>
                  )}
                </div>

                {/* Stats Summary */}
                <div className="mt-6 bg-gray-800/30 rounded-xl p-6 border border-gray-700">
                  <h3 className="text-lg font-bold mb-4">통계 요약</h3>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400">최고 순위 달성</span>
                      <span className="font-bold text-yellow-500">
                        {stats.bestRank ? `#${stats.bestRank}` : '-'}
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400">차트 진입 수</span>
                      <span className="font-bold">{stats.chartCount}개</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400">총 차트 체류 기간</span>
                      <span className="font-bold">{stats.totalDays}일</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400">평균 순위</span>
                      <span className="font-bold">#{stats.avgRank}</span>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </Layout>
  );
}