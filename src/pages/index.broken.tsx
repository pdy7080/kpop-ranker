import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport Head from 'next/head';\nimport { motion } from 'framer-motion';\nimport Layout from '@/components/Layout';\nimport { \n  TrendingUp, Music, Award, Globe, Zap, Clock, Trophy, Sparkles\n} from 'lucide-react';\n\n// 🚀 정적 컴포넌트들 (즉시 표시)\nconst StaticHeroSection = React.memo(() => (\n  <motion.section \n    initial={{ opacity: 0, y: 20 }}\n    animate={{ opacity: 1, y: 0 }}\n    transition={{ duration: 0.6 }}\n    className=\"relative bg-gradient-to-r from-purple-900 via-blue-900 to-indigo-900 text-white py-16 px-4 overflow-hidden\"\n  >\n    <div className=\"absolute inset-0 bg-black/20\" />\n    <div className=\"relative max-w-6xl mx-auto text-center\">\n      <motion.div\n        initial={{ scale: 0.8, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ delay: 0.2, duration: 0.8 }}\n        className=\"mb-8\"\n      >\n        <Trophy className=\"w-16 h-16 mx-auto mb-4 text-yellow-400\" />\n        <h1 className=\"text-5xl md:text-7xl font-bold mb-4 bg-gradient-to-r from-yellow-400 via-pink-500 to-purple-500 bg-clip-text text-transparent\">\n          KPOP Ranker\n        </h1>\n        <p className=\"text-xl md:text-2xl mb-8 text-blue-100\">\n          전 세계 K-POP 차트를 한눈에\n        </p>\n      </motion.div>\n      \n      <motion.div \n        initial={{ y: 20, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ delay: 0.4 }}\n        className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\"\n      >\n        <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4\">\n          <Globe className=\"w-8 h-8 mx-auto mb-2 text-blue-400\" />\n          <div className=\"text-2xl font-bold\">8개</div>\n          <div className=\"text-sm text-blue-200\">글로벌 차트</div>\n        </div>\n        <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4\">\n          <Music className=\"w-8 h-8 mx-auto mb-2 text-green-400\" />\n          <div className=\"text-2xl font-bold\">실시간</div>\n          <div className=\"text-sm text-green-200\">업데이트</div>\n        </div>\n        <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4\">\n          <Zap className=\"w-8 h-8 mx-auto mb-2 text-yellow-400\" />\n          <div className=\"text-2xl font-bold\">초고속</div>\n          <div className=\"text-sm text-yellow-200\">로딩</div>\n        </div>\n        <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4\">\n          <Award className=\"w-8 h-8 mx-auto mb-2 text-purple-400\" />\n          <div className=\"text-2xl font-bold\">통합</div>\n          <div className=\"text-sm text-purple-200\">검색</div>\n        </div>\n      </motion.div>\n    </div>\n  </motion.section>\n));\n\n// 🔄 스켈레톤 로딩 컴포넌트\nconst TrendingSkeleton = React.memo(() => (\n  <div className=\"max-w-6xl mx-auto px-4 py-8\">\n    <div className=\"flex items-center mb-6\">\n      <TrendingUp className=\"w-8 h-8 mr-3 text-purple-600\" />\n      <h2 className=\"text-3xl font-bold text-gray-800\">실시간 트렌딩</h2>\n      <Sparkles className=\"w-6 h-6 ml-2 text-yellow-500 animate-pulse\" />\n    </div>\n    \n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {[...Array(8)].map((_, i) => (\n        <div key={i} className=\"bg-white rounded-xl shadow-lg p-4 animate-pulse\">\n          <div className=\"flex items-start space-x-4\">\n            <div className=\"w-16 h-16 bg-gray-200 rounded-lg flex-shrink-0\" />\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"h-4 bg-gray-200 rounded mb-2\" />\n              <div className=\"h-3 bg-gray-200 rounded mb-2 w-3/4\" />\n              <div className=\"flex space-x-1\">\n                <div className=\"h-6 w-12 bg-gray-200 rounded\" />\n                <div className=\"h-6 w-12 bg-gray-200 rounded\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n    \n    <div className=\"text-center mt-8\">\n      <div className=\"inline-flex items-center text-blue-600\">\n        <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n        <span className=\"text-sm\">최신 데이터 로딩 중...</span>\n      </div>\n    </div>\n  </div>\n));\n\n// 🎯 동적 트렌딩 카드 컴포넌트\nconst TrendingCard = React.memo(({ track, index }) => {\n  const [imageLoaded, setImageLoaded] = useState(false);\n  \n  const chartBadges = useMemo(() => {\n    if (!track.charts) return null;\n    \n    return Object.entries(track.charts).map(([chart, rank]) => (\n      <span key={chart} className=\"inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full mr-1\">\n        {chart}: #{rank}\n      </span>\n    ));\n  }, [track.charts]);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ delay: index * 0.1 }}\n      className=\"bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 p-4 cursor-pointer group\"\n    >\n      <div className=\"flex items-start space-x-4\">\n        <div className=\"relative w-16 h-16 flex-shrink-0\">\n          {!imageLoaded && (\n            <div className=\"w-16 h-16 bg-gray-200 rounded-lg animate-pulse flex items-center justify-center\">\n              <Music className=\"w-6 h-6 text-gray-400\" />\n            </div>\n          )}\n          <img\n            src={track.image_url || '/images/default-album.svg'}\n            alt={`${track.artist} - ${track.track}`}\n            className={`w-16 h-16 rounded-lg object-cover transition-opacity duration-300 ${\n              imageLoaded ? 'opacity-100' : 'opacity-0 absolute'\n            }`}\n            onLoad={() => setImageLoaded(true)}\n            onError={() => setImageLoaded(true)}\n            loading=\"lazy\"\n          />\n        </div>\n        \n        <div className=\"flex-1 min-w-0\">\n          <h3 className=\"font-bold text-gray-900 truncate group-hover:text-purple-600 transition-colors\">\n            {track.artist}\n          </h3>\n          <p className=\"text-sm text-gray-600 truncate mb-2\">\n            {track.track}\n          </p>\n          <div className=\"flex flex-wrap items-center gap-1\">\n            {chartBadges}\n          </div>\n          <div className=\"mt-2 text-xs text-gray-500\">\n            {track.chart_count}개 차트 진입 • 최고 #{track.best_rank}\n          </div>\n        </div>\n      </div>\n    </motion.div>\n  );\n});\n\n// 🔄 스마트 데이터 로더\nclass SmartDataLoader {\n  constructor() {\n    this.cacheVersion = null;\n    this.lastUpdate = null;\n    this.retryCount = 0;\n    this.maxRetries = 3;\n  }\n  \n  async loadMainPageData() {\n    console.log('🚀 메인페이지 데이터 로딩 시작...');\n    \n    try {\n      // 1. CDN 캐시 먼저 시도 (초고속)\n      const cachedData = await this.loadFromCache();\n      if (cachedData) {\n        console.log('✅ CDN 캐시에서 로딩 성공');\n        return cachedData;\n      }\n      \n      // 2. API 직접 호출 (폴백)\n      const apiData = await this.loadFromAPI();\n      console.log('✅ API에서 로딩 성공');\n      return apiData;\n      \n    } catch (error) {\n      console.error('❌ 데이터 로딩 실패:', error);\n      return this.getEmptyData();\n    }\n  }\n  \n  async loadFromCache() {\n    try {\n      const response = await fetch('/data/main-cache.json', {\n        cache: 'no-cache' // 항상 최신 버전 확인\n      });\n      \n      if (!response.ok) throw new Error('캐시 파일 없음');\n      \n      const data = await response.json();\n      \n      // 캐시 만료 확인 (1시간)\n      const cacheAge = Date.now() - new Date(data.generated_at).getTime();\n      if (cacheAge > 3600000) { // 1시간 = 3600000ms\n        console.warn('⚠️ 캐시 만료됨, API 호출로 폴백');\n        throw new Error('캐시 만료');\n      }\n      \n      this.cacheVersion = data.version;\n      this.lastUpdate = data.generated_at;\n      \n      return {\n        trending: data.trending || [],\n        stats: data.stats || {},\n        fromCache: true,\n        version: data.version\n      };\n      \n    } catch (error) {\n      console.log('💭 캐시 로딩 실패, API로 폴백:', error.message);\n      return null;\n    }\n  }\n  \n  async loadFromAPI() {\n    const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';\n    \n    try {\n      const [trendingResponse, statsResponse] = await Promise.all([\n        fetch(`${API_URL}/api/trending?limit=20`, { \n          timeout: 10000 \n        }),\n        fetch(`${API_URL}/api/chart/update-status`, { \n          timeout: 5000 \n        })\n      ]);\n      \n      const trending = trendingResponse.ok ? \n        (await trendingResponse.json()).trending || [] : [];\n      \n      const stats = statsResponse.ok ? \n        await statsResponse.json() : {};\n      \n      return {\n        trending,\n        stats,\n        fromCache: false,\n        version: Date.now()\n      };\n      \n    } catch (error) {\n      if (this.retryCount < this.maxRetries) {\n        this.retryCount++;\n        console.log(`🔄 API 재시도 ${this.retryCount}/${this.maxRetries}...`);\n        await new Promise(resolve => setTimeout(resolve, 1000 * this.retryCount));\n        return this.loadFromAPI();\n      }\n      throw error;\n    }\n  }\n  \n  getEmptyData() {\n    return {\n      trending: [],\n      stats: { total_tracks: 0, active_charts: 0 },\n      fromCache: false,\n      error: true\n    };\n  }\n  \n  async checkForUpdates(currentVersion) {\n    try {\n      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';\n      const response = await fetch(`${API_URL}/api/cache/version`);\n      \n      if (response.ok) {\n        const { version, hasUpdate } = await response.json();\n        return hasUpdate && version > currentVersion;\n      }\n    } catch (error) {\n      console.log('버전 확인 실패:', error);\n    }\n    return false;\n  }\n}\n\n// 🏠 메인 페이지 컴포넌트\nconst HomePage = () => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [updateAvailable, setUpdateAvailable] = useState(false);\n  \n  const dataLoader = useMemo(() => new SmartDataLoader(), []);\n  \n  // 🚀 메인 데이터 로딩\n  const loadData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const result = await dataLoader.loadMainPageData();\n      setData(result);\n      \n      if (result.error) {\n        setError('데이터를 불러올 수 없습니다. 잠시 후 다시 시도해주세요.');\n      }\n      \n    } catch (err) {\n      console.error('데이터 로딩 오류:', err);\n      setError('데이터 로딩 중 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  }, [dataLoader]);\n  \n  // 🔄 백그라운드 업데이트 확인\n  const checkUpdates = useCallback(async () => {\n    if (!data?.version) return;\n    \n    const hasUpdate = await dataLoader.checkForUpdates(data.version);\n    if (hasUpdate) {\n      setUpdateAvailable(true);\n    }\n  }, [data?.version, dataLoader]);\n  \n  // 초기 로딩\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n  \n  // 주기적 업데이트 확인 (5분마다)\n  useEffect(() => {\n    if (!data) return;\n    \n    const interval = setInterval(checkUpdates, 300000); // 5분\n    return () => clearInterval(interval);\n  }, [checkUpdates, data]);\n  \n  // 🎯 업데이트 알림 처리\n  const handleUpdate = useCallback(() => {\n    setUpdateAvailable(false);\n    loadData();\n  }, [loadData]);\n  \n  return (\n    <>\n      <Head>\n        <title>KPOP Ranker - 전 세계 K-POP 차트 실시간 모니터링</title>\n        <meta name=\"description\" content=\"Melon, Genie, Bugs, Spotify 등 8개 글로벌 차트를 실시간으로 모니터링하는 K-POP 랭킹 플랫폼\" />\n        <meta name=\"keywords\" content=\"KPOP, 케이팝, 차트, 랭킹, Melon, Genie, Spotify, Billboard\" />\n        <meta property=\"og:title\" content=\"KPOP Ranker - 실시간 K-POP 차트\" />\n        <meta property=\"og:description\" content=\"전 세계 K-POP 차트를 한눈에 확인하세요\" />\n        <link rel=\"canonical\" href=\"https://kpop-ranker.vercel.app\" />\n      </Head>\n      \n      <Layout>\n        {/* 🚀 정적 히어로 섹션 (즉시 표시) */}\n        <StaticHeroSection />\n        \n        {/* 🔄 업데이트 알림 */}\n        {updateAvailable && (\n          <motion.div\n            initial={{ opacity: 0, y: -50 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"bg-blue-500 text-white px-4 py-2 text-center\"\n          >\n            <span className=\"mr-4\">새로운 차트 데이터가 있습니다!</span>\n            <button \n              onClick={handleUpdate}\n              className=\"bg-white text-blue-500 px-3 py-1 rounded text-sm font-semibold hover:bg-blue-50 transition-colors\"\n            >\n              업데이트\n            </button>\n          </motion.div>\n        )}\n        \n        {/* 🔄 동적 트렌딩 섹션 */}\n        {loading ? (\n          <TrendingSkeleton />\n        ) : error ? (\n          <div className=\"max-w-6xl mx-auto px-4 py-8 text-center\">\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-8\">\n              <h3 className=\"text-lg font-semibold text-red-800 mb-2\">데이터 로딩 오류</h3>\n              <p className=\"text-red-600 mb-4\">{error}</p>\n              <button \n                onClick={loadData}\n                className=\"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition-colors\"\n              >\n                다시 시도\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"max-w-6xl mx-auto px-4 py-8\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center\">\n                <TrendingUp className=\"w-8 h-8 mr-3 text-purple-600\" />\n                <h2 className=\"text-3xl font-bold text-gray-800\">실시간 트렌딩</h2>\n                <Sparkles className=\"w-6 h-6 ml-2 text-yellow-500\" />\n              </div>\n              \n              <div className=\"text-sm text-gray-500\">\n                {data?.fromCache ? '📋 캐시' : '🔄 실시간'} • \n                {data?.stats?.total_tracks || 0}개 트랙 • \n                {data?.stats?.active_charts || 0}개 차트\n              </div>\n            </div>\n            \n            {data?.trending?.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {data.trending.slice(0, 12).map((track, index) => (\n                  <TrendingCard key={`${track.artist}-${track.track}`} track={track} index={index} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Music className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">트렌딩 데이터 없음</h3>\n                <p className=\"text-gray-500\">잠시 후 다시 확인해주세요.</p>\n              </div>\n            )}\n            \n            {data?.trending?.length > 12 && (\n              <div className=\"text-center mt-8\">\n                <a \n                  href=\"/trending\" \n                  className=\"inline-flex items-center bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition-colors font-semibold\"\n                >\n                  <TrendingUp className=\"w-5 h-5 mr-2\" />\n                  전체 트렌딩 보기\n                </a>\n              </div>\n            )}\n          </div>\n        )}\n      </Layout>\n    </>\n  );\n};\n\n// 🚀 정적 생성 설정 (Next.js)\nexport async function getStaticProps() {\n  // 빌드 타임에는 기본 데이터만 포함\n  return {\n    props: {\n      // 메타데이터만 정적으로 생성\n      buildTime: new Date().toISOString()\n    },\n    // ISR 설정 - 1시간마다 재생성\n    revalidate: 3600\n  };\n}\n\nexport default HomePage;\n