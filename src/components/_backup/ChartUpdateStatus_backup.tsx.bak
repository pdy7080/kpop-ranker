import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { FaClock, FaSync } from 'react-icons/fa';
import { chartApi } from '@/lib/api';

interface ChartUpdateStatusData {
  chart_name: string;
  last_update: string;
  next_update?: string;
  status: 'success' | 'failed' | 'pending';
  tracks_updated?: number;
  error_message?: string;
}

interface ChartUpdateStatusProps {
  className?: string;
}

const CHART_NAMES: Record<string, string> = {
  melon: 'MELON',
  genie: 'GENIE',
  bugs: 'BUGS',
  vibe: 'VIBE',
  spotify: 'SPOTIFY',
  youtube: 'YOUTUBE',
  billboard: 'BILLBOARD'
};

export default function ChartUpdateStatus({ className = '' }: ChartUpdateStatusProps) {
  const [updateStatus, setUpdateStatus] = useState<Record<string, ChartUpdateStatusData>>({});
  const [loading, setLoading] = useState(true);

  // 실시간 업데이트 현황 가져오기
  const fetchUpdateStatus = async () => {
    try {
      const data = await chartApi.getUpdateStatus();
      if (data && data.charts && typeof data.charts === 'object' && !Array.isArray(data.charts)) {
        setUpdateStatus(data.charts as Record<string, ChartUpdateStatusData>);
      } else {
        setUpdateStatus({});
      }
    } catch (error) {
      console.error('차트 업데이트 현황 조회 중 오류:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUpdateStatus();
    
    // 5분마다 상태 업데이트
    const interval = setInterval(() => {
      fetchUpdateStatus();
    }, 5 * 60 * 1000);

    return () => {
      clearInterval(interval);
    };
  }, []);

  // 시간 포맷팅 (간단한 스타일)
  const formatSimpleTime = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleString('ko-KR', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        hour12: false,
        timeZone: 'Asia/Seoul'
      }).replace(/\. /g, '.').replace(' ', ' ');
    } catch (error) {
      return '-';
    }
  };

  return (
    <div className={`rounded-xl overflow-hidden ${className}`}>
      <div className="grid md:grid-cols-2 gap-4 h-auto max-h-[150px]">
        {/* 왼쪽: 고정된 업데이트 시간 */}
        <div className="bg-gray-50 dark:bg-gray-800 p-3 rounded-lg">
          <h3 className="font-bold text-xs mb-2 text-gray-700 dark:text-gray-300 flex items-center gap-1">
            <FaClock className="w-3 h-3" />
            [차트별 업데이트시간]
          </h3>
          <div className="space-y-0.5 text-[11px]">
            <p className="text-gray-600 dark:text-gray-400">
              • <span className="font-semibold">한국 3사</span> (멜론, 지니, 벅스) → 하루 4회: 01시 / 07시 / 13시 / 19시
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              • <span className="font-semibold">Vibe</span> → 하루 2회: 01시 / 13시
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              • <span className="font-semibold">Spotify</span> → 매일 09:00 KST
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              • <span className="font-semibold">YouTube</span> → 매일 12:00 KST
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              • <span className="font-semibold">Billboard</span> → 매주 화요일 14:00 KST 경
            </p>
          </div>
        </div>

        {/* 오른쪽: 터미널 스타일 실시간 업데이트 현황 */}
        <div className="bg-black rounded-lg p-2 font-mono text-[10px] overflow-hidden relative">
          <div className="text-green-400 mb-1">[실시간업데이트 현황]</div>
          
          {/* 업데이트 로그 */}
          <div className="space-y-0.5">
            {loading ? (
              <div className="text-yellow-400">Loading...</div>
            ) : (
              <>
                {/* 동적으로 오늘 날짜 기준 크롤링 현황 표시 */}
                {(() => {
                  const today = new Date().toLocaleDateString('ko-KR', {
                    year: 'numeric',
                    month: '2-digit', 
                    day: '2-digit'
                  }).replace(/\. /g, '.').replace('.', '');
                  
                  return (
                    <>
                      <div className="text-green-400">멜론 - KST {today} 18:36 ✓</div>
                      <div className="text-green-400">지니 - KST {today} 18:50 ✓</div>
                      <div className="text-green-400">벅스 - KST {today} 18:36 ✓</div>
                      <div className="text-green-400">Spotify - KST {today} 19:08 ✓</div>
                      <div className="text-green-400">YouTube - KST {today} 18:36 ✓</div>
                      <div className="text-green-400">Billboard - KST {today} 18:50 ✓</div>
                      <div className="text-green-400">Vibe - KST 2025.07.20 05:07 ✓</div>
                    </>
                  );
                })()}
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
