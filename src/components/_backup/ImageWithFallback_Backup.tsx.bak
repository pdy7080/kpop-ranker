import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import { apiUrls, API_CONFIG } from '@/lib/apiConfig';

interface ImageWithFallbackProps {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  className?: string;
  fill?: boolean;
  artistName?: string;
  trackName?: string;
  priority?: boolean;
  unoptimized?: boolean;
}

/**
 * 🔧 완전 수정된 이미지 폴백 컴포넌트
 * 
 * 수정사항:
 * 1. currentSrc 초기화 문제 해결
 * 2. 백엔드 API v2 직접 사용
 * 3. 한글 아티스트명 완벽 지원
 */
const ImageWithFallback: React.FC<ImageWithFallbackProps> = ({
  src,
  alt,
  width = 128,
  height = 128,
  className = '',
  fill = false,
  artistName = '',
  trackName = '',
  priority = false,
  unoptimized = true
}) => {
  const [currentSrc, setCurrentSrc] = useState<string>('');
  const [fallbackIndex, setFallbackIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [hasError, setHasError] = useState(false);

  // 폴백 URL 배열 생성 (백엔드 실제 경로 기반)
  const generateFallbackUrls = (): string[] => {
    const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';
    const urls: string[] = [];
    
    // 1순위: v2 API (아티스트 + 트랙)
    if (artistName && trackName) {
      urls.push(`${baseUrl}/api/album-image-v2/${encodeURIComponent(artistName)}/${encodeURIComponent(trackName)}`);
    }
    
    // 2순위: v2 API (아티스트만)
    if (artistName) {
      urls.push(`${baseUrl}/api/album-image-v2/${encodeURIComponent(artistName)}`);
    }
    
    // 3순위: 아티스트 첫 글자 기본 이미지 (백엔드에 실제 존재하는 파일들)
    if (artistName) {
      const firstChar = artistName.charAt(0);
      
      // 한글 맵핑 (백엔드 파일 기준)
      const koreanMapping: { [key: string]: string } = {
        '임': '임',  // 임영웅 → 임.jpg (백엔드에 존재)
        '아': '아',  // 아이유 → 아.jpg  
        '뉴': 'N',   // 뉴진스 → N.jpg
        '블': 'B',   // 블랙핑크 → B.jpg
        '세': '세',  // 세븐틴 → 세.jpg
        '트': '트',  // 트와이스 → 트.jpg
        '스': '스',  // 스키즈 → 스.jpg
        'K': 'K',
        'H': 'H',
        'A': 'A',
        'B': 'B',
        'C': 'C',
        'D': 'D',
        'E': 'E',
        'F': 'F',
        'G': 'G',
        'I': 'I',
        'J': 'J',
        'L': 'L',
        'M': 'M',
        'N': 'N',
        'O': 'O',
        'P': 'P',
        'Q': 'Q',
        'R': 'R',
        'S': 'S',
        'T': 'T',
        'U': 'U',
        'W': 'W'
      };
      
      const mappedChar = koreanMapping[firstChar] || firstChar.toUpperCase();
      if (mappedChar) {
        urls.push(`${baseUrl}/static/default_images/${mappedChar}.jpg`);
      }
    }
    
    // 4순위: 최종 기본 이미지
    urls.push(`${baseUrl}/static/default_images/default.jpg`);
    
    console.log('🖼️ 생성된 폴백 URLs:', urls);
    return urls;
  };

  // 초기 URL 설정
  useEffect(() => {
    const fallbackUrls = generateFallbackUrls();
    if (fallbackUrls.length > 0) {
      console.log('🖼️ 첫 번째 URL 설정:', fallbackUrls[0]);
      setCurrentSrc(fallbackUrls[0]);
      setFallbackIndex(0);
      setIsLoading(true);
      setHasError(false);
    }
  }, [artistName, trackName]);

  // 이미지 로드 실패 시 다음 폴백으로 전환
  const handleError = () => {
    const fallbackUrls = generateFallbackUrls();
    const nextIndex = fallbackIndex + 1;
    
    console.log(`🖼️ 이미지 로드 실패, 폴백 시도: ${nextIndex}/${fallbackUrls.length}`);
    
    if (nextIndex < fallbackUrls.length) {
      setFallbackIndex(nextIndex);
      setCurrentSrc(fallbackUrls[nextIndex]);
      console.log(`🖼️ 폴백 ${nextIndex + 1}/${fallbackUrls.length}: ${fallbackUrls[nextIndex]}`);
    } else {
      console.warn('🖼️ 모든 이미지 폴백 실패:', { artistName, trackName });
      setHasError(true);
      setIsLoading(false);
    }
  };

  // 이미지 로드 성공 시
  const handleLoad = () => {
    console.log('✅ 이미지 로드 성공:', currentSrc);
    setIsLoading(false);
    setHasError(false);
  };

  // 모든 폴백 실패 시 텍스트 플레이스홀더
  if (hasError || (!isLoading && !currentSrc)) {
    const displayChar = artistName ? artistName.charAt(0).toUpperCase() : '♪';
    
    return (
      <div 
        className={`bg-gradient-to-br from-purple-500 to-blue-600 flex items-center justify-center text-white font-bold text-2xl ${className}`}
        style={{ width, height, objectFit: 'cover' }}
      >
        {displayChar}
      </div>
    );
  }

  // 로딩 중일 때 스켈레톤
  if (isLoading && !currentSrc) {
    return (
      <div 
        className={`bg-gray-200 animate-pulse flex items-center justify-center ${className}`}
        style={{ width, height }}
      >
        <div className="text-gray-400">...</div>
      </div>
    );
  }

  const imageProps = {
    src: currentSrc,
    alt: alt || `${artistName}${trackName ? ` - ${trackName}` : ''} 앨범 이미지`,
    className: `${className} transition-opacity duration-200`,
    onError: handleError,
    onLoad: handleLoad,
    priority,
    unoptimized: true,
    style: { objectFit: 'cover' as const },
    width: fill ? undefined : width,
    height: fill ? undefined : height
  };

  if (fill) {
    return <Image {...imageProps} fill />;
  }

  return <Image {...imageProps} />;
};

export default ImageWithFallback;