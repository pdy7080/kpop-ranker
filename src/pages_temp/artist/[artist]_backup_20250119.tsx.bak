/**
 * 🔧 아티스트 상세 페이지 곡 클릭 라우팅 수정
 * - 곡 카드 클릭 시 /search?artist=...&track=... 페이지로 이동
 * - 현재 onSelect 함수를 실제 라우팅으로 변경
 */
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Layout from '@/components/Layout';
import ImageWithFallback from '@/components/ImageWithFallback';
import { motion, AnimatePresence } from 'framer-motion';
import { FaHeart, FaExternalLinkAlt, FaPlay, FaTrophy, FaFire } from 'react-icons/fa';
import { apiUrls } from '@/lib/apiConfig';

// ========================================
// 🎵 새로운 아티스트 상세 페이지 - 완전 재구현 (라우팅 수정)
// ========================================

interface ChartRank {
  rank: number | null;
  views_or_streams: string | null;
  last_updated: string | null;
  in_chart: boolean;
  rank_class: string;
}

interface Track {
  name: string;
  album_image: string;
  charts: {
    melon: ChartRank;
    genie: ChartRank;
    bugs: ChartRank;
    vibe: ChartRank;
    spotify: ChartRank;
    billboard: ChartRank;
    youtube: ChartRank;
  };
  streaming_links: {
    spotify: string;
    apple_music: string;
    youtube_music: string;
    melon: string;
    genie: string;
    bugs: string;
  };
  trend_score: number;
}

interface ArtistStats {
  total_tracks: number;
  chart_presence: Record<string, number>;
  best_ranks: Record<string, number>;
  best_overall_rank: number | null;
  global_popularity_score: number;
  chart_diversity: number;
}

interface FandomInsight {
  type: 'action_needed' | 'celebration' | 'info';
  title: string;
  message: string;
  tracks?: Array<{
    track: string;
    chart: string;
    rank: number;
  }>;
}

interface ArtistData {
  artist: string;
  variations: string[];
  tracks: Track[];
  stats: ArtistStats;
  fandom_insights: FandomInsight[];
  last_updated: string;
}

// 차트별 설정 데이터
const CHART_CONFIG = {
  melon: {
    name: 'Melon',
    icon: '🍈',
    emoji: '🔥',
    color: '#00CD3C',
    bgColor: 'bg-green-500/20',
    borderColor: 'border-green-400/50',
    description: '국내 최대'
  },
  genie: {
    name: 'Genie', 
    icon: '🧞',
    emoji: '🚀',
    color: '#1E40AF',
    bgColor: 'bg-blue-500/20',
    borderColor: 'border-blue-400/50',
    description: '실시간 빠름'
  },
  bugs: {
    name: 'Bugs',
    icon: '🐛', 
    emoji: '📊',
    color: '#F97316',
    bgColor: 'bg-orange-500/20',
    borderColor: 'border-orange-400/50',
    description: '다운로드 강세'
  },
  vibe: {
    name: 'Vibe',
    icon: '🎵',
    emoji: '🎶', 
    color: '#8B5CF6',
    bgColor: 'bg-purple-500/20',
    borderColor: 'border-purple-400/50',
    description: '네이버 생태계'
  },
  spotify: {
    name: 'Spotify',
    icon: '🎧',
    emoji: '🌍',
    color: '#1DB954',
    bgColor: 'bg-green-600/20', 
    borderColor: 'border-green-500/50',
    description: '글로벌 1위'
  },
  billboard: {
    name: 'Billboard',
    icon: '🏆',
    emoji: '🇺🇸',
    color: '#F59E0B',
    bgColor: 'bg-yellow-500/20',
    borderColor: 'border-yellow-400/50', 
    description: '미국 공식'
  },
  youtube: {
    name: 'YouTube',
    icon: '▶️',
    emoji: '❤️',
    color: '#FF0000',
    bgColor: 'bg-red-500/20',
    borderColor: 'border-red-400/50',
    description: '조회수'
  }
};

// 백엔드 응답을 프론트엔드 형식으로 변환하는 함수
function transformResponseToArtistData(response: any): ArtistData {
  const tracks: Track[] = [];
  const chartPresence: Record<string, number> = {};
  const bestRanks: Record<string, number> = {};
  let bestOverallRank: number | null = null;

  // artist_normalized 값 가져오기 (한글 아티스트명 이미지 문제 해결)
  const artistNormalized = response.artist_normalized || response.artist || '';

  // charts 데이터를 tracks 형식으로 변환
  if (response.charts) {
    const trackMap = new Map<string, Track>();

    Object.entries(response.charts).forEach(([chartName, chartTracks]) => {
      const chartKey = chartName.toLowerCase();
      chartPresence[chartKey] = (chartTracks as any[]).length;

      (chartTracks as any[]).forEach((track: any) => {
        const trackName = track.track;
        
        if (!trackMap.has(trackName)) {
          trackMap.set(trackName, {
            name: trackName,
            // artist_normalized를 사용하여 이미지 URL 생성
            album_image: track.album_image || `/api/album-image-v2/${encodeURIComponent(artistNormalized)}/${encodeURIComponent(trackName)}`,
            charts: {
              melon: { rank: null, views_or_streams: null, last_updated: null, in_chart: false, rank_class: 'not-in-chart' },
              genie: { rank: null, views_or_streams: null, last_updated: null, in_chart: false, rank_class: 'not-in-chart' },
              bugs: { rank: null, views_or_streams: null, last_updated: null, in_chart: false, rank_class: 'not-in-chart' },
              vibe: { rank: null, views_or_streams: null, last_updated: null, in_chart: false, rank_class: 'not-in-chart' },
              spotify: { rank: null, views_or_streams: null, last_updated: null, in_chart: false, rank_class: 'not-in-chart' },
              billboard: { rank: null, views_or_streams: null, last_updated: null, in_chart: false, rank_class: 'not-in-chart' },
              youtube: { rank: null, views_or_streams: null, last_updated: null, in_chart: false, rank_class: 'not-in-chart' },
            },
            streaming_links: {
              spotify: '#',
              apple_music: '#',
              youtube_music: '#',
              melon: '#',
              genie: '#',
              bugs: '#',
            },
            trend_score: 0,
          });
        }

        const currentTrack = trackMap.get(trackName)!;
        const rank = track.rank !== 999 && track.rank !== null ? track.rank : null;
        
        // 차트 데이터 업데이트
        if (chartKey in currentTrack.charts) {
          (currentTrack.charts as any)[chartKey] = {
            rank: rank,
            views_or_streams: track.views || null,
            last_updated: track.crawl_time || null,
            in_chart: rank !== null,
            rank_class: rank ? (rank <= 10 ? 'top-10' : rank <= 50 ? 'top-50' : 'in-chart') : 'not-in-chart',
          };
        }

        // 최고 순위 업데이트
        if (rank !== null) {
          if (!bestRanks[chartKey] || rank < bestRanks[chartKey]) {
            bestRanks[chartKey] = rank;
          }
          if (bestOverallRank === null || rank < bestOverallRank) {
            bestOverallRank = rank;
          }
        }
      });
    });

    tracks.push(...trackMap.values());
  }

  // 트렌드 점수 계산
  tracks.forEach(track => {
    let score = 0;
    Object.values(track.charts).forEach(chart => {
      if (chart.rank !== null) {
        score += (101 - chart.rank);
      }
    });
    track.trend_score = score;
  });

  // 트렌드 점수로 정렬
  tracks.sort((a, b) => b.trend_score - a.trend_score);

  return {
    artist: response.artist || response.artist_name || '',
    variations: response.variations || [],
    tracks,
    stats: {
      total_tracks: tracks.length,
      chart_presence: chartPresence,
      best_ranks: bestRanks,
      best_overall_rank: bestOverallRank,
      global_popularity_score: response.global_popularity_score || 0,
      chart_diversity: Object.keys(chartPresence).length,
    },
    fandom_insights: response.fandom_insights || [],
    last_updated: response.last_updated || new Date().toISOString(),
  };
}

export default function NewArtistDetailPage() {
  const router = useRouter();
  const { artist } = router.query;
  const artistName = Array.isArray(artist) ? artist[0] : artist || '';

  const [artistData, setArtistData] = useState<ArtistData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedTrack, setSelectedTrack] = useState<string | null>(null);

  useEffect(() => {
    if (artistName) {
      loadArtistData();
    }
  }, [artistName]);

  const loadArtistData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch(apiUrls.artistDetail(artistName));
      
      if (!response.ok) {
        throw new Error(`아티스트 정보를 찾을 수 없습니다: ${response.status}`);
      }
      
      const data = await response.json();
      
      // charts 필드가 있으면 성공으로 판단
      if (data.charts || data.success) {
        // 백엔드 응답 구조를 프론트엔드 구조로 변환
        const transformedData = transformResponseToArtistData(data);
        setArtistData(transformedData);
        if (transformedData.tracks.length > 0) {
          setSelectedTrack(transformedData.tracks[0].name);
        }
      } else if (data.error) {
        throw new Error(data.error);
      } else {
        throw new Error('아티스트 데이터를 불러올 수 없습니다');
      }
    } catch (error: any) {
      console.error('아티스트 데이터 로드 오류:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  // 🔧 곡 클릭 시 검색 페이지로 이동하는 함수 (수정됨)
  const handleTrackClick = (trackName: string) => {
    console.log(`🎯 곡 클릭: ${artistName} - ${trackName}`);
    console.log(`🎯 이동할 경로: /search?artist=${encodeURIComponent(artistName)}&track=${encodeURIComponent(trackName)}`);
    
    // 검색 페이지로 라우팅 (artist와 track 파라미터 전달)
    router.push(`/search?artist=${encodeURIComponent(artistName)}&track=${encodeURIComponent(trackName)}`);
  };

  // 로딩 상태
  if (loading) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-900 via-indigo-900 to-blue-900">
          <div className="text-center">
            <div className="relative w-32 h-32 mx-auto mb-8">
              <div className="absolute inset-0 rounded-full border-4 border-purple-300 border-t-transparent animate-spin"></div>
              <div className="absolute inset-4 rounded-full border-4 border-pink-300 border-b-transparent animate-spin" style={{animationDirection: 'reverse'}}></div>
            </div>
            <h2 className="text-2xl font-bold text-white mb-4">아티스트 정보를 불러오는 중...</h2>
            <p className="text-purple-300">잠시만 기다려주세요</p>
          </div>
        </div>
      </Layout>
    );
  }

  // 에러 상태
  if (error || !artistData) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-900 via-indigo-900 to-blue-900">
          <div className="text-center">
            <div className="text-6xl mb-8">😢</div>
            <h1 className="text-4xl font-bold text-red-400 mb-4">아티스트를 찾을 수 없어요</h1>
            <p className="text-xl text-gray-300 mb-8">{error || '알 수 없는 오류가 발생했습니다'}</p>
            <div className="space-x-4">
              <button 
                onClick={() => router.push('/')}
                className="px-8 py-4 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-all duration-300 transform hover:scale-105 font-semibold"
              >
                홈으로 가기
              </button>
              <button 
                onClick={() => router.back()}
                className="px-8 py-4 bg-gray-600 text-white rounded-xl hover:bg-gray-700 transition-all duration-300 transform hover:scale-105 font-semibold"
              >
                돌아가기
              </button>
            </div>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <>
      <Head>
        <title>{artistData.artist} - KPOP Ranker</title>
        <meta name="description" content={`${artistData.artist}의 전체 차트 순위와 트렌드를 확인하세요`} />
        <meta property="og:title" content={`${artistData.artist} - KPOP Ranker`} />
        <meta property="og:description" content={`${artistData.artist}의 7개 차트 순위 실시간 모니터링`} />
      </Head>

      <Layout>
        <div className="min-h-screen bg-gradient-to-br from-purple-900 via-indigo-900 to-blue-900">
          {/* 아티스트 헤더 */}
          <ArtistHeader artistData={artistData} />
          
          {/* 팬덤 인사이트 */}
          <FandomInsights insights={artistData.fandom_insights} />
          
          {/* 트랙 리스트 - 수정된 버전 */}
          <TracksSection 
            tracks={artistData.tracks} 
            artistName={artistData.artist}
            selectedTrack={selectedTrack}
            onTrackClick={handleTrackClick}
          />
        </div>
      </Layout>
    </>
  );
}

// 아티스트 헤더 컴포넌트
const ArtistHeader = ({ artistData }: { artistData: ArtistData }) => {
  const router = useRouter();
  
  return (
    <div className="relative bg-gradient-to-b from-black/60 to-transparent">
      <div className="max-w-7xl mx-auto px-4 py-16">
        <div className="text-center">
          {/* 아티스트 이름 */}
          <motion.h1 
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-6xl md:text-8xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 via-pink-500 to-red-500 mb-4"
          >
            {artistData.artist}
          </motion.h1>
          
          {/* 변형 이름들 */}
          {artistData.variations.length > 1 && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.2 }}
              className="flex flex-wrap justify-center gap-2 mb-8"
            >
              {artistData.variations.filter(v => v !== artistData.artist).map((variation, index) => (
                <span key={index} className="px-3 py-1 bg-white/10 backdrop-blur-sm rounded-full text-purple-300 text-sm">
                  {variation}
                </span>
              ))}
            </motion.div>
          )}
          
          {/* 통계 */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className="grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto"
          >
            <StatCard 
              label="총 트랙 수" 
              value={artistData.stats.total_tracks} 
              icon={<FaPlay />} 
            />
            <StatCard 
              label="차트 진입률" 
              value={`${artistData.stats.chart_diversity}%`} 
              icon={<FaTrophy />} 
            />
            <StatCard 
              label="최고 순위" 
              value={artistData.stats.best_overall_rank ? `#${artistData.stats.best_overall_rank}` : 'N/A'} 
              icon={<FaFire />} 
            />
            <StatCard 
              label="글로벌 점수" 
              value={artistData.stats.global_popularity_score} 
              icon={<FaHeart />} 
            />
          </motion.div>
        </div>
      </div>
    </div>
  );
};

// 통계 카드 컴포넌트
const StatCard = ({ label, value, icon }: { label: string; value: any; icon: React.ReactNode }) => {
  return (
    <div className="bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20">
      <div className="flex items-center justify-center text-purple-400 mb-2">
        {icon}
      </div>
      <div className="text-2xl md:text-3xl font-bold text-white mb-1">{value}</div>
      <div className="text-xs text-purple-300">{label}</div>
    </div>
  );
};

// 팬덤 인사이트 컴포넌트
const FandomInsights = ({ insights }: { insights: FandomInsight[] }) => {
  if (!insights || insights.length === 0) return null;
  
  return (
    <div className="max-w-7xl mx-auto px-4 py-12">
      <h2 className="text-3xl font-bold text-white mb-8 text-center">
        🔥 팬덤 인사이트
      </h2>
      
      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {insights.map((insight, index) => (
          <InsightCard key={index} insight={insight} />
        ))}
      </div>
    </div>
  );
};

// 인사이트 카드 컴포넌트
const InsightCard = ({ insight }: { insight: FandomInsight }) => {
  const getInsightStyle = () => {
    switch (insight.type) {
      case 'celebration':
        return 'bg-gradient-to-br from-yellow-400/20 to-yellow-600/20 border-yellow-400/50';
      case 'action_needed':
        return 'bg-gradient-to-br from-red-400/20 to-red-600/20 border-red-400/50';
      default:
        return 'bg-gradient-to-br from-blue-400/20 to-blue-600/20 border-blue-400/50';
    }
  };
  
  const getInsightIcon = () => {
    switch (insight.type) {
      case 'celebration':
        return '🎉';
      case 'action_needed':
        return '⚠️';
      default:
        return 'ℹ️';
    }
  };
  
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      className={`${getInsightStyle()} backdrop-blur-lg rounded-xl p-6 border`}
    >
      <div className="flex items-start space-x-3">
        <span className="text-2xl">{getInsightIcon()}</span>
        <div className="flex-1">
          <h3 className="font-bold text-white mb-2">{insight.title}</h3>
          <p className="text-purple-200 text-sm">{insight.message}</p>
          
          {insight.tracks && insight.tracks.length > 0 && (
            <div className="mt-4 space-y-2">
              {insight.tracks.map((track, index) => (
                <div key={index} className="flex justify-between items-center bg-white/10 rounded-lg px-3 py-2">
                  <span className="text-white text-sm">{track.track}</span>
                  <div className="flex items-center space-x-2">
                    <span className="text-purple-300 text-xs">{track.chart}</span>
                    <span className="text-yellow-400 font-bold text-sm">#{track.rank}</span>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </motion.div>
  );
};

// 트랙 섹션 컴포넌트 - 수정된 버전
const TracksSection = ({ 
  tracks, 
  artistName, 
  selectedTrack, 
  onTrackClick
}: { 
  tracks: Track[]; 
  artistName: string;
  selectedTrack: string | null;
  onTrackClick: (track: string) => void;
}) => {
  return (
    <div className="max-w-7xl mx-auto px-4 pb-20">
      <h2 className="text-4xl font-bold text-white mb-12 text-center">
        🎵 전체 차트 순위
        <p className="text-lg text-purple-300 mt-2">곡을 클릭하면 상세 차트를 볼 수 있어요</p>
      </h2>
      
      <div className="space-y-6">
        {tracks.map((track, index) => (
          <TrackCard 
            key={track.name}
            track={track} 
            artistName={artistName} 
            index={index}
            isSelected={selectedTrack === track.name}
            onTrackClick={() => onTrackClick(track.name)}
          />
        ))}
      </div>
    </div>
  );
};

// YouTube 조회수 포맷팅
const formatYouTubeViews = (views: string | null) => {
  if (!views) return '0';
  
  const numericViews = views.replace(/[^0-9]/g, '');
  if (numericViews) {
    const num = parseInt(numericViews);
    if (num >= 1000000000) return `${(num / 1000000000).toFixed(1)}B`;
    if (num >= 1000000) return `${(num / 1000000).toFixed(0)}M`;
    if (num >= 1000) return `${(num / 1000).toFixed(0)}K`;
    return num.toString();
  }
  
  return views || '0';
};

// 컴팩트 차트 카드 컴포넌트
const CompactChartCard = ({ chart, data }: { chart: string, data: ChartRank }) => {
  const config = CHART_CONFIG[chart.toLowerCase() as keyof typeof CHART_CONFIG];
  if (!config) return null;

  const getRankDisplay = () => {
    if (!data.in_chart || !data.rank) {
      return {
        text: 'OUT',
        class: 'text-gray-400 text-xs',
        bgClass: 'bg-gray-500/10'
      };
    }
    
    if (chart.toLowerCase() === 'youtube') {
      // YouTube는 조회수 표시
      const views = formatYouTubeViews(data.views_or_streams);
      return {
        text: views,
        class: 'text-white text-xs font-semibold',
        bgClass: getRankBgClass(data.rank)
      };
    }
    
    return {
      text: `#${data.rank}`,
      class: 'text-white text-sm font-bold',
      bgClass: getRankBgClass(data.rank)
    };
  };

  const getRankBgClass = (rank: number) => {
    if (rank <= 10) return 'bg-gradient-to-r from-yellow-400 to-yellow-600';
    if (rank <= 30) return 'bg-gradient-to-r from-gray-300 to-gray-500'; 
    if (rank <= 50) return 'bg-gradient-to-r from-orange-400 to-orange-600';
    return 'bg-gradient-to-r from-purple-400 to-purple-600';
  };

  const rankDisplay = getRankDisplay();

  return (
    <div className={`${config.bgColor} ${config.borderColor} border rounded-lg px-3 py-2 text-center min-w-[80px] hover:scale-105 transition-all duration-200 group relative`}>
      {/* 차트 아이콘 + 이름 */}
      <div className="flex items-center justify-center mb-1">
        <span className="text-lg mr-1">{config.icon}</span>
        <span className="text-xs font-medium text-white">{config.name}</span>
      </div>
      
      {/* 순위 또는 조회수 */}
      <div className={`${rankDisplay.bgClass} rounded px-2 py-1 mb-1`}>
        <span className={rankDisplay.class}>{rankDisplay.text}</span>
      </div>
      
      {/* 특징 이모지 */}
      <div className="text-sm">{config.emoji}</div>
      
      {/* 호버 시 설명 툴팁 */}
      <div className="hidden group-hover:block absolute z-10 bg-black text-white text-xs rounded px-2 py-1 -top-8 left-1/2 transform -translate-x-1/2 whitespace-nowrap">
        {config.description}
      </div>
    </div>
  );
};

// 트랙 카드 (한 줄 레이아웃) - 수정된 버전
const TrackCard = ({ 
  track, 
  artistName, 
  index, 
  isSelected, 
  onTrackClick
}: { 
  track: Track; 
  artistName: string; 
  index: number;
  isSelected: boolean;
  onTrackClick: () => void;
}) => {
  const [isInPortfolio, setIsInPortfolio] = useState(false);
  const [showStreamingLinks, setShowStreamingLinks] = useState(false);

  useEffect(() => {
    checkPortfolioStatus();
  }, []);

  const checkPortfolioStatus = async () => {
    try {
      const response = await fetch(`${apiUrls.portfolio()}/track-status/${encodeURIComponent(artistName)}/${encodeURIComponent(track.name)}`);
      const data = await response.json();
      setIsInPortfolio(data.in_portfolio);
    } catch (error) {
      console.error('포트폴리오 상태 확인 오류:', error);
    }
  };

  const addToPortfolio = async () => {
    try {
      const response = await fetch(apiUrls.portfolio(), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-User-ID': 'demo_user'
        },
        body: JSON.stringify({
          artist: artistName,
          track: track.name,
          notes: `${artistName}의 ${track.name} - 차트 모니터링`
        })
      });
      
      if (response.ok) {
        setIsInPortfolio(true);
        // 성공 알림 (토스트 등)
      }
    } catch (error) {
      console.error('포트폴리오 추가 오류:', error);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 30 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: index * 0.1 }}
      onClick={onTrackClick}
      className={`${
        isSelected ? 'bg-white/20 ring-2 ring-purple-400' : 'bg-white/10'
      } backdrop-blur-lg rounded-2xl p-6 hover:bg-white/15 transition-all duration-300 group cursor-pointer hover:scale-[1.02]`}
    >
      <div className="flex items-center space-x-6">
        
        {/* 앨범 이미지 */}
        <div className="relative w-24 h-24 md:w-32 md:h-32 rounded-xl overflow-hidden flex-shrink-0 group-hover:scale-105 transition-transform duration-300">
          <ImageWithFallback
            src={track.album_image}
            alt={track.name}
            artistName={artistName}
            trackName={track.name}
            width={128}
            height={128}
            className="w-full h-full object-cover rounded-xl"
            priority={index < 4}
          />
          <div className="absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <FaPlay className="w-6 h-6 text-white" />
          </div>
          
          {/* 트렌드 스코어 배지 */}
          <div className="absolute top-2 right-2 bg-gradient-to-r from-purple-500 to-pink-500 text-white px-2 py-1 rounded-full text-xs font-bold">
            {track.trend_score}점
          </div>
        </div>

        {/* 곡 정보 및 차트 */}
        <div className="flex-1 min-w-0">
          <div className="flex items-start justify-between mb-4">
            <div>
              <h3 className="text-xl md:text-2xl font-bold text-white mb-1 group-hover:text-purple-300 transition-colors">
                {track.name}
              </h3>
              <p className="text-purple-300">{artistName}</p>
              <p className="text-xs text-purple-400 mt-1 opacity-0 group-hover:opacity-100 transition-opacity">
                클릭하면 상세 차트를 볼 수 있어요 →
              </p>
            </div>
            
            <div className="flex items-center space-x-3">
              {/* 액션 버튼들 */}
            </div>
          </div>
          
          {/* 차트별 순위 표시 (컴팩트) */}
          <div className="flex flex-wrap gap-2">
            {Object.entries(track.charts).map(([chartName, chartData]) => (
              <CompactChartCard key={chartName} chart={chartName} data={chartData} />
            ))}
          </div>
        </div>
      </div>
    </motion.div>
  );
};
