import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Layout from '@/components/Layout';
import AlbumImage from '@/components/AlbumImage';
import SmartSearchBox from '@/components/SmartSearchBox';
import { motion, AnimatePresence } from 'framer-motion';
import { FaMusic, FaTrophy, FaChartLine, FaArrowUp, FaArrowDown, FaHeart, FaRegHeart, FaCalendar, FaEye, FaHistory, FaExclamationTriangle } from 'react-icons/fa';
import toast from 'react-hot-toast';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

interface ChartData {
  chart: string;
  rank: number | null;
  views: string;
  album_image?: string;
  crawl_time?: string;
  previous_rank?: number | null;
}

interface TrackData {
  artist: string;
  artist_normalized?: string;
  track: string;
  charts: ChartData[];
}

interface ChartHistory {
  date: string;
  rank: number;
  views?: string;
}

const CHART_CONFIG = {
  Spotify: {
    icon: '🎧',
    color: '#1DB954',
    bgColor: 'bg-green-500/10',
    borderColor: 'border-green-500',
    description: '글로벌 스트리밍'
  },
  YouTube: {
    icon: '▶️',
    color: '#FF0000',
    bgColor: 'bg-red-500/10',
    borderColor: 'border-red-500',
    description: '뮤직비디오 조회수'
  },
  Melon: {
    icon: '🍈',
    color: '#00CD3C',
    bgColor: 'bg-green-600/10',
    borderColor: 'border-green-600',
    description: '국내 최대 차트'
  },
  Genie: {
    icon: '🧞',
    color: '#1E40AF',
    bgColor: 'bg-blue-500/10',
    borderColor: 'border-blue-500',
    description: '실시간 음원'
  },
  Bugs: {
    icon: '🐛',
    color: '#F97316',
    bgColor: 'bg-orange-500/10',
    borderColor: 'border-orange-500',
    description: '다운로드 중심'
  },
  Vibe: {
    icon: '🎵',
    color: '#8B5CF6',
    bgColor: 'bg-purple-500/10',
    borderColor: 'border-purple-500',
    description: '네이버 뮤직'
  },
  Billboard: {
    icon: '🏆',
    color: '#F59E0B',
    bgColor: 'bg-yellow-500/10',
    borderColor: 'border-yellow-500',
    description: '미국 공식 차트'
  }
};

export default function TrackDetailPage() {
  const router = useRouter();
  const { artist, track } = router.query;
  const [trackData, setTrackData] = useState<TrackData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedChart, setSelectedChart] = useState<string | null>(null);
  const [chartHistory, setChartHistory] = useState<ChartHistory[]>([]);
  const [isInPortfolio, setIsInPortfolio] = useState(false);
  const [loadingPortfolio, setLoadingPortfolio] = useState(false);
  const [showChartModal, setShowChartModal] = useState(false);

  // 포트폴리오 상태 확인
  const checkPortfolioStatus = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';
      const response = await fetch(`${apiUrl}/api/portfolio`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        const exists = data.items?.some((item: any) => 
          item.artist === artist && item.track === track
        );
        setIsInPortfolio(exists);
      }
    } catch (error) {
      console.error('포트폴리오 상태 확인 오류:', error);
    }
  };

  // 포트폴리오 추가/제거
  const togglePortfolio = async () => {
    const token = localStorage.getItem('token');
    if (!token) {
      toast.error('로그인이 필요합니다');
      router.push('/auth/login');
      return;
    }

    setLoadingPortfolio(true);
    try {
      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';
      
      if (isInPortfolio) {
        // 제거 로직 (구현 필요)
        toast.success('포트폴리오에서 제거되었습니다');
        setIsInPortfolio(false);
      } else {
        // 추가
        const response = await fetch(`${apiUrl}/api/portfolio`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            artist: artist as string,
            track: track as string
          })
        });

        if (response.ok) {
          toast.success('포트폴리오에 추가되었습니다');
          setIsInPortfolio(true);
        } else {
          toast.error('포트폴리오 추가 실패');
        }
      }
    } catch (error) {
      console.error('포트폴리오 오류:', error);
      toast.error('오류가 발생했습니다');
    } finally {
      setLoadingPortfolio(false);
    }
  };

  // 트랙 데이터 가져오기
  const fetchTrackData = async () => {
    if (!artist || !track) return;

    setIsLoading(true);
    try {
      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';
      const response = await fetch(`${apiUrl}/api/search?artist=${encodeURIComponent(artist as string)}&track=${encodeURIComponent(track as string)}`);
      
      if (!response.ok) {
        throw new Error('트랙 정보를 불러올 수 없습니다');
      }

      const data = await response.json();
      
      // 응답 데이터를 TrackData 형식으로 변환
      const charts: ChartData[] = [];
      
      if (data.results && data.results.length > 0) {
        data.results.forEach((chartResult: any) => {
          if (chartResult.tracks && chartResult.tracks.length > 0) {
            const trackInfo = chartResult.tracks[0]; // 첫 번째 트랙 정보 사용
            charts.push({
              chart: chartResult.chart,
              rank: trackInfo.rank,
              views: trackInfo.views || '',
              album_image: trackInfo.album_image,
              crawl_time: trackInfo.crawl_time
            });
          }
        });
      }

      const formattedData: TrackData = {
        artist: data.artist || artist as string,
        artist_normalized: data.artist_normalized,
        track: data.track || track as string,
        charts: charts
      };

      setTrackData(formattedData);
    } catch (error) {
      console.error('트랙 정보 로드 오류:', error);
      toast.error('트랙 정보를 불러올 수 없습니다');
    } finally {
      setIsLoading(false);
    }
  };

  // 차트 히스토리 가져오기 (더미 데이터)
  const fetchChartHistory = (chartName: string) => {
    // 실제로는 API에서 가져와야 함
    const dummyHistory: ChartHistory[] = [
      { date: '2025-01-19', rank: 15, views: '1.2M' },
      { date: '2025-01-18', rank: 18, views: '1.1M' },
      { date: '2025-01-17', rank: 22, views: '980K' },
      { date: '2025-01-16', rank: 25, views: '920K' },
      { date: '2025-01-15', rank: 28, views: '850K' },
      { date: '2025-01-14', rank: 32, views: '800K' },
      { date: '2025-01-13', rank: 35, views: '750K' },
    ];
    setChartHistory(dummyHistory);
  };

  useEffect(() => {
    if (artist && track) {
      fetchTrackData();
      checkPortfolioStatus();
    }
  }, [artist, track]);

  const handleChartClick = (chartName: string) => {
    setSelectedChart(chartName);
    fetchChartHistory(chartName);
    setShowChartModal(true);
  };

  if (isLoading) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
            <p className="mt-4 text-gray-600">트랙 정보를 불러오는 중...</p>
          </div>
        </div>
      </Layout>
    );
  }

  if (!trackData || trackData.charts.length === 0) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <p className="text-gray-600">트랙 정보를 찾을 수 없습니다.</p>
            <button
              onClick={() => router.push('/')}
              className="mt-4 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
            >
              홈으로 돌아가기
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  // 차트 데이터
  const chartData = {
    labels: chartHistory.map(h => h.date),
    datasets: [
      {
        label: '순위',
        data: chartHistory.map(h => h.rank),
        borderColor: CHART_CONFIG[selectedChart as keyof typeof CHART_CONFIG]?.color || '#8B5CF6',
        backgroundColor: CHART_CONFIG[selectedChart as keyof typeof CHART_CONFIG]?.color || '#8B5CF6',
        tension: 0.1,
        yAxisID: 'y',
      }
    ]
  };

  const chartOptions = {
    responsive: true,
    interaction: {
      mode: 'index' as const,
      intersect: false,
    },
    plugins: {
      legend: {
        display: false,
      },
      title: {
        display: true,
        text: `${selectedChart} 순위 변화`,
      },
    },
    scales: {
      y: {
        type: 'linear' as const,
        display: true,
        position: 'left' as const,
        reverse: true, // 순위는 낮을수록 좋으므로 역순
        min: 1,
        max: 100,
      },
    },
  };

  // 첫 번째 차트의 앨범 이미지 사용
  const albumImage = trackData.charts.find(chart => chart.album_image)?.album_image || 
    `/api/album-image-v2/${encodeURIComponent(trackData.artist_normalized || trackData.artist)}/${encodeURIComponent(trackData.track)}`;

  // 차트 진입 수 계산
  const totalCharts = trackData.charts.length;
  const rankedCharts = trackData.charts.filter(c => c.rank !== null).length;

  // 베스트 순위
  const bestRank = Math.min(...trackData.charts.filter(c => c.rank !== null).map(c => c.rank!));
  const averageRank = Math.round(
    trackData.charts.filter(c => c.rank !== null).reduce((sum, c) => sum + c.rank!, 0) / rankedCharts
  );

  return (
    <Layout>
      <Head>
        <title>{trackData.track} - {trackData.artist} | K-POP Ranker</title>
        <meta name="description" content={`${trackData.artist}의 ${trackData.track} 차트 순위`} />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* 헤더 */}
        <div className="bg-white shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div className="flex flex-col lg:flex-row items-start lg:items-center justify-between gap-6">
              <div className="flex flex-col sm:flex-row items-start sm:items-center gap-6 w-full lg:w-auto">
                {/* 앨범 이미지 */}
                <div className="flex-shrink-0">
                  <AlbumImage
                    src={albumImage}
                    alt={`${trackData.artist} - ${trackData.track}`}
                    size="2xl"
                    artist={trackData.artist_normalized || trackData.artist}
                    artistNormalized={trackData.artist_normalized}
                    track={trackData.track}
                  />
                </div>
                
                {/* 트랙 정보 */}
                <div className="flex-1">
                  <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">{trackData.track}</h1>
                  <button
                    onClick={() => router.push(`/artist/${encodeURIComponent(trackData.artist)}`)}
                    className="text-lg sm:text-xl text-purple-600 hover:text-purple-700 mt-1 transition-colors"
                  >
                    {trackData.artist}
                  </button>
                  <div className="flex items-center gap-4 mt-3">
                    <p className="text-sm text-gray-600">
                      {totalCharts}개 차트 진입
                    </p>
                    {/* 포트폴리오 추가 버튼 */}
                    <button
                      onClick={togglePortfolio}
                      disabled={loadingPortfolio}
                      className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-all ${
                        isInPortfolio 
                          ? 'bg-pink-100 text-pink-600 hover:bg-pink-200' 
                          : 'bg-purple-100 text-purple-600 hover:bg-purple-200'
                      } ${loadingPortfolio ? 'opacity-50 cursor-not-allowed' : ''}`}
                    >
                      {isInPortfolio ? <FaHeart /> : <FaRegHeart />}
                      <span className="font-medium">
                        {isInPortfolio ? '포트폴리오에서 제거' : '포트폴리오에 추가'}
                      </span>
                    </button>
                  </div>
                </div>
              </div>
              
              <div className="w-full lg:w-auto">
                <SmartSearchBox />
              </div>
            </div>
          </div>
        </div>

        {/* 차트별 순위 카드 */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <FaChartLine className="mr-2 text-purple-600" />
            차트별 순위
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {trackData.charts.map((chartInfo, index) => {
              const config = CHART_CONFIG[chartInfo.chart as keyof typeof CHART_CONFIG] || {
                icon: '📊',
                color: '#6B7280',
                bgColor: 'bg-gray-100',
                borderColor: 'border-gray-300',
                description: chartInfo.chart
              };

              return (
                <motion.div
                  key={`${chartInfo.chart}-${index}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className={`bg-white rounded-xl shadow-sm overflow-hidden hover:shadow-lg transition-all cursor-pointer border ${config.borderColor} border-opacity-20`}
                  onClick={() => handleChartClick(chartInfo.chart)}
                >
                  <div className={`${config.bgColor} px-4 py-3 border-b ${config.borderColor} border-opacity-20`}>
                    <h3 className="font-semibold flex items-center gap-2">
                      <span className="text-2xl">{config.icon}</span>
                      <span>{chartInfo.chart}</span>
                    </h3>
                    <p className="text-xs text-gray-600 mt-1">{config.description}</p>
                  </div>
                  
                  <div className="p-6">
                    <div className="text-center">
                      {chartInfo.rank !== null ? (
                        <>
                          <div className={`text-5xl font-bold mb-2`} style={{ color: config.color }}>
                            #{chartInfo.rank}
                          </div>
                          {chartInfo.views && (
                            <div className="text-sm text-gray-600 flex items-center justify-center gap-1">
                              <FaEye className="text-gray-400" />
                              {chartInfo.views}
                            </div>
                          )}
                          {chartInfo.previous_rank !== null && chartInfo.previous_rank !== undefined && (
                            <div className="mt-3">
                              {chartInfo.rank < chartInfo.previous_rank ? (
                                <span className="text-green-600 flex items-center justify-center gap-1 text-sm">
                                  <FaArrowUp />
                                  {chartInfo.previous_rank - chartInfo.rank}계단 상승
                                </span>
                              ) : chartInfo.rank > chartInfo.previous_rank ? (
                                <span className="text-red-600 flex items-center justify-center gap-1 text-sm">
                                  <FaArrowDown />
                                  {chartInfo.rank - chartInfo.previous_rank}계단 하락
                                </span>
                              ) : (
                                <span className="text-gray-500 text-sm">순위 유지</span>
                              )}
                            </div>
                          )}
                        </>
                      ) : (
                        <div className="text-gray-400">
                          <FaMusic className="mx-auto text-3xl mb-2" />
                          <p className="text-sm">조회수만 집계</p>
                          {chartInfo.views && (
                            <div className="text-sm text-gray-600 mt-2 flex items-center justify-center gap-1">
                              <FaEye className="text-gray-400" />
                              {chartInfo.views}
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                    {chartInfo.crawl_time && (
                      <div className="mt-4 pt-4 border-t border-gray-100">
                        <div className="flex items-center justify-center text-xs text-gray-500">
                          <FaCalendar className="mr-1" />
                          {new Date(chartInfo.crawl_time).toLocaleDateString('ko-KR')}
                        </div>
                      </div>
                    )}
                    <div className="mt-4">
                      <button className="w-full text-sm text-purple-600 hover:text-purple-700 font-medium flex items-center justify-center gap-1">
                        <FaHistory />
                        순위 변화 보기
                      </button>
                    </div>
                  </div>
                </motion.div>
              );
            })}
          </div>

          {/* 차트 성과 요약 */}
          <div className="mt-12 bg-white rounded-xl shadow-sm p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <FaTrophy className="mr-2 text-yellow-500" />
              차트 성과 요약
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center p-4 bg-purple-50 rounded-lg">
                <div className="text-3xl font-bold text-purple-600">
                  {totalCharts}
                </div>
                <div className="text-sm text-gray-600 mt-1">진입 차트 수</div>
              </div>
              
              <div className="text-center p-4 bg-pink-50 rounded-lg">
                <div className="text-3xl font-bold text-pink-600">
                  {isFinite(bestRank) ? bestRank : '-'}
                </div>
                <div className="text-sm text-gray-600 mt-1">최고 순위</div>
              </div>
              
              <div className="text-center p-4 bg-indigo-50 rounded-lg">
                <div className="text-3xl font-bold text-indigo-600">
                  {isFinite(averageRank) ? averageRank : '-'}
                </div>
                <div className="text-sm text-gray-600 mt-1">평균 순위</div>
              </div>
            </div>

            {/* 팬덤 미션 */}
            <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="flex items-start gap-3">
                <FaExclamationTriangle className="text-yellow-600 flex-shrink-0 mt-1" />
                <div>
                  <h4 className="font-semibold text-gray-900">팬덤 미션</h4>
                  <p className="text-sm text-gray-600 mt-1">
                    {rankedCharts < totalCharts 
                      ? `아직 ${totalCharts - rankedCharts}개 차트에서 순위권 밖입니다. 스트리밍을 늘려주세요!`
                      : bestRank > 10
                      ? 'TOP 10 진입을 위해 더 많은 스트리밍이 필요합니다!'
                      : '좋은 성과를 유지하고 있습니다. 계속 응원해주세요!'}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* 차트 히스토리 모달 */}
      <AnimatePresence>
        {showChartModal && selectedChart && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"
            onClick={() => setShowChartModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[80vh] overflow-auto"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="mb-4">
                <h3 className="text-xl font-bold text-gray-900 flex items-center gap-2">
                  <span className="text-2xl">{CHART_CONFIG[selectedChart as keyof typeof CHART_CONFIG]?.icon}</span>
                  {selectedChart} 순위 변화
                </h3>
                <p className="text-gray-600 mt-1">
                  {trackData.artist} - {trackData.track}
                </p>
              </div>
              
              <div className="h-64 mb-4">
                <Line data={chartData} options={chartOptions} />
              </div>

              {/* 상세 데이터 */}
              <div className="mt-6">
                <h4 className="font-semibold text-gray-900 mb-3">일별 순위 기록</h4>
                <div className="space-y-2">
                  {chartHistory.map((history, index) => (
                    <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                      <span className="text-sm text-gray-600">{history.date}</span>
                      <div className="flex items-center gap-4">
                        <span className="font-semibold">#{history.rank}</span>
                        {history.views && (
                          <span className="text-sm text-gray-500">{history.views}</span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              
              <button
                onClick={() => setShowChartModal(false)}
                className="w-full mt-6 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
              >
                닫기
              </button>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </Layout>
  );
}
